/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π –ø–ª–æ—â–∞–¥–∫–∏
 */
import { scene } from '../scene.js';
import { ground, updateGroundReferences, updatePlaygroundDimensions } from './playgroundCore.js';
import { createSimplePlayground } from './playgroundCreator.js';
import { PLAYGROUND } from '../config.js';
import { hideLoadingOverlay } from '../loadingManager.js';
import * as THREE from 'three';


/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø–ª–æ—â–∞–¥–∫–∏
 * @param {String} modelName - –ò–º—è —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏ –ø–ª–æ—â–∞–¥–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'rubber')
 * @param {Number} width - –®–∏—Ä–∏–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {Number} length - –î–ª–∏–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {String} color - –¶–≤–µ—Ç –ø–ª–æ—â–∞–¥–∫–∏ (—Å–µ—Ä—ã–π, —á–µ—Ä–Ω—ã–π, –∑–µ–ª–µ–Ω—ã–π, –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π)
 * @returns {Promise} –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–ª–æ—â–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
 */
export async function loadPlayground(modelName = 'rubber', width = null, length = null, color = null) {
    let userWidth = PLAYGROUND.defaultWidth;
    let userLength = PLAYGROUND.defaultLength;
    let userColor = '—Å–µ—Ä—ã–π'; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å —Ü–≤–µ—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–ª–æ—â–∞–¥–∫–∏
    if (width && length) {
        userWidth = width;
        userLength = length;
    } else if (window.selectedPlaygroundWidth && window.selectedPlaygroundLength) {
        userWidth = window.selectedPlaygroundWidth;
        userLength = window.selectedPlaygroundLength;
    } else {
        const widthInput = document.getElementById("playgroundWidth");
        const lengthInput = document.getElementById("playgroundLength");
        if (widthInput && lengthInput) {
            userWidth = parseFloat(widthInput.value) || PLAYGROUND.defaultWidth;
            userLength = parseFloat(lengthInput.value) || PLAYGROUND.defaultLength;
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ø–ª–æ—â–∞–¥–∫–∏
    if (color) {
        userColor = color;
    } else if (window.selectedPlaygroundColor) {
        userColor = window.selectedPlaygroundColor;
    }
    
    try { 
        // –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ (–Ω–æ –Ω–µ –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω)
        removeExistingPlaygrounds(); 
    } catch (error) {}
    updateGroundReferences(null, null);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É
    if (modelName === 'custom') {
        console.log('=== –ó–ê–ì–†–£–ó–ö–ê –ö–ê–°–¢–û–ú–ù–û–ô –ü–õ–û–©–ê–î–ö–ò ===');
        console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏:', window.customPlaygroundShape);
        
        try {
            if (!window.customPlaygroundShape) {
                throw new Error('–î–∞–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
            
            // –°–æ–∑–¥–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω (–±–æ–ª—å—à–æ–π –∫—Ä—É–≥ –¥–ª—è –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è)
            console.log('–°–æ–∑–¥–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω...');
            const { createGreenBackground } = await import('./playgroundCreator.js');
            const greenBackground = createGreenBackground(userWidth, userLength);
            console.log('‚úÖ –ó–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω —Å–æ–∑–¥–∞–Ω');
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É
            console.log('–°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É...');
            const customPlayground = createCustomPlayground(window.customPlaygroundShape, userWidth, userLength, userColor);
            
            if (!customPlayground) {
                throw new Error('–ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–æ—â–∞–¥–∫—É
            if (customPlayground.position) customPlayground.position.y = 0;
            updatePlaygroundDimensions(userWidth, userLength);
            
            if (customPlayground.userData) {
                customPlayground.userData.groundColor = userColor;
                customPlayground.userData.isCustomPlayground = true;
                customPlayground.userData.customShape = window.customPlaygroundShape;
            }
            
            console.log('‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
            
            setTimeout(() => {
                hideLoadingOverlay();
            }, 500);
            return Promise.resolve(customPlayground);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏:', error);
            
            // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ
            console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ...');
            const simplePlane = createSimplePlayground(userWidth, userLength, userColor);
            if (simplePlane && simplePlane.position) simplePlane.position.y = 0;
            updatePlaygroundDimensions(userWidth, userLength);
            
            setTimeout(() => {
                hideLoadingOverlay();
            }, 500);
            return Promise.resolve(simplePlane);
        }
    } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞
        const simplePlane = createSimplePlayground(userWidth, userLength, userColor);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–ª–æ—â–∞–¥–∫–∏ –Ω–∞ Y=0
        if (simplePlane && simplePlane.position) simplePlane.position.y = 0;
        updatePlaygroundDimensions(userWidth, userLength);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –ø–ª–æ—â–∞–¥–∫–∏ –≤ userData
        if (simplePlane && simplePlane.userData) {
            simplePlane.userData.groundColor = userColor;
        }
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∫—Ä—ã—Ç–∏—è loading overlay
        setTimeout(() => {
            hideLoadingOverlay();
        }, 500);
        return Promise.resolve(simplePlane);
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ –∏–∑ —Å—Ü–µ–Ω—ã
 */
function removeExistingPlaygrounds() {    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scene –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (!scene) {
        console.warn('Scene is undefined, cannot remove existing playgrounds');
        return;
    }
    
    try {
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        // (–Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –æ–±—ä–µ–∫—Ç—ã –ø—Ä—è–º–æ –≤–æ –≤—Ä–µ–º—è traverse)
        const objectsToRemove = [];
        
        scene.traverse((object) => {
            // –ò—â–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–ª–æ—â–∞–¥–æ–∫, –ù–û –ù–ï —É–¥–∞–ª—è–µ–º –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
            if (object && object.userData && 
                (object.userData.modelName === 'rubber' || 
                 object.userData.modelName === 'simple_playground' ||
                 (object.userData.modelName && object.userData.modelName.includes('playground') && !object.userData.isCustomPlayground) ||
                 // –ù–ï —É–¥–∞–ª—è–µ–º –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω - –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è
                 (object.name && object.name.includes('playground') && object.name !== 'custom_playground' && object.name !== 'green_background'))) {
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ù–ï —É–¥–∞–ª—è–µ–º –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
                if (object.name !== 'green_background' && !object.userData.isGround) {
                    objectsToRemove.push(object);
                }
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        objectsToRemove.forEach(object => {
            console.log('–£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ü–µ–Ω—ã:', object.userData.modelName || object.name);
            scene.remove(object);
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫:', error);
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö Fabric.js
 * @param {Object} customShape - –î–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä –∏–∑ Fabric.js
 * @param {Number} width - –®–∏—Ä–∏–Ω–∞ –≤ –º–µ—Ç—Ä–∞—Ö
 * @param {Number} length - –î–ª–∏–Ω–∞ –≤ –º–µ—Ç—Ä–∞—Ö
 * @param {String} color - –¶–≤–µ—Ç –ø–ª–æ—â–∞–¥–∫–∏
 * @returns {THREE.Group} –ì—Ä—É–ø–ø–∞ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–æ–π
 */
function createCustomPlayground(customShape, width, length, color) {
    console.log('üèóÔ∏è –°–û–ó–î–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô –ö–ê–°–¢–û–ú–ù–û–ô –ü–õ–û–©–ê–î–ö–ò');
    console.log('üìä –î–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã:', customShape);
    console.log('üìê –†–∞–∑–º–µ—Ä—ã –ø–ª–æ—â–∞–¥–∫–∏:', width, 'x', length);
    
    if (!customShape?.objects?.length) {
        console.error('‚ùå –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è!');
        return null;
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏
    const playgroundGroup = new THREE.Group();
    playgroundGroup.name = 'custom_playground';
    playgroundGroup.userData = {
        modelName: 'custom_playground',
        isPlayground: true,
        isCustomPlayground: true
    };
    
    // –ü—Ä—è–º–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ: canvas 1000x1000 –ø–∏–∫—Å–µ–ª–µ–π = 100x100 –º–µ—Ç—Ä–æ–≤
    // 1 –ø–∏–∫—Å–µ–ª—å = 0.1 –º–µ—Ç—Ä–∞ (–∫–∞–∫ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ)
    const scaleX = 0.1; // –º–∞—Å—à—Ç–∞–± –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const scaleZ = 0.1; // –º–∞—Å—à—Ç–∞–± –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    
    // –¶–µ–Ω—Ç—Ä canvas –≤ –ø–∏–∫—Å–µ–ª—è—Ö –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤ 3D —Å—Ü–µ–Ω–µ
    const canvasCenterX = customShape.canvasWidth / 2;
    const canvasCenterY = customShape.canvasHeight / 2;
    
    console.log(`üìè –ú–∞—Å—à—Ç–∞–±: canvas ${customShape.canvasWidth}x${customShape.canvasHeight} ‚Üí ${width}x${length}–º`);
    console.log(`üìè –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: X=${scaleX.toFixed(4)}, Z=${scaleZ.toFixed(4)}`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ Fabric.js
    let processedObjects = 0;
    
    customShape.objects.forEach((fabricObj, index) => {
        try {
            console.log(`\n=== –û–ë–™–ï–ö–¢ ${index + 1} ===`);
            console.log('–¢–∏–ø:', fabricObj.type);
            console.log('–ü–æ–∑–∏—Ü–∏—è:', fabricObj.left, fabricObj.top);
            console.log('–†–∞–∑–º–µ—Ä:', fabricObj.width, fabricObj.height);
            
            let mesh = null;
        
        // –°–æ–∑–¥–∞–µ–º –º–µ—à –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if (fabricObj.type === 'rect') {
            // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            const realWidth = fabricObj.width * fabricObj.scaleX * scaleX;
            const realHeight = fabricObj.height * fabricObj.scaleY * scaleZ;
            
            const geometry = new THREE.BoxGeometry(realWidth, 0.01, realHeight); // –ü–ª–æ—Å–∫–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            const material = new THREE.MeshStandardMaterial({ 
                color: 0xFF0000, // –ö–†–ê–°–ù–´–ô —Ü–≤–µ—Ç –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
                roughness: 0.8,
                metalness: 0.1
            });
            
            mesh = new THREE.Mesh(geometry, material);
            // –†–ê–ó–ú–ï–©–ê–ï–ú –ü–†–Ø–ú–û–£–ì–û–õ–¨–ù–ò–ö –≤ —Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ canvas
            const worldX = (fabricObj.left - canvasCenterX) * scaleX;
            const worldZ = (fabricObj.top - canvasCenterY) * scaleZ;
            mesh.position.set(worldX, 0.05, worldZ);
            
            console.log(`‚úÖ –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ ${index + 1} —Ä–∞–∑–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (${worldX.toFixed(2)}, 0.05, ${worldZ.toFixed(2)})`);
            
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫:', realWidth.toFixed(2), 'x', realHeight.toFixed(2), '–º');
            
        } else if (fabricObj.type === 'circle') {
            // –ö–†–£–ì - –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
            console.log('üîµ –°–û–ó–î–ê–ï–ú –ö–†–£–ì!');
            console.log('fabricObj.radius:', fabricObj.radius);
            console.log('fabricObj.scaleX:', fabricObj.scaleX);
            console.log('fabricObj.scaleY:', fabricObj.scaleY);
            console.log('scaleX:', scaleX, 'scaleZ:', scaleZ);
            
            const radius = fabricObj.radius * (fabricObj.scaleX || 1) * Math.max(scaleX, scaleZ);
            
            console.log('–í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å:', radius, '–º–µ—Ç—Ä–æ–≤');
            
            const geometry = new THREE.CylinderGeometry(radius, radius, 0.01, 32); // –ü–ª–æ—Å–∫–∏–π –∫—Ä—É–≥
            const material = new THREE.MeshStandardMaterial({ 
                color: 0x0000FF, // –°–ò–ù–ò–ô —Ü–≤–µ—Ç –¥–ª—è –∫—Ä—É–≥–∞ - —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∏—Ç—å –æ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
                roughness: 0.8,
                metalness: 0.1
            });
            
            mesh = new THREE.Mesh(geometry, material);
            // –†–ê–ó–ú–ï–©–ê–ï–ú –ö–†–£–ì –≤ —Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ canvas
            const worldX = (fabricObj.left - canvasCenterX) * scaleX;
            const worldZ = (fabricObj.top - canvasCenterY) * scaleZ;
            mesh.position.set(worldX, 0.05, worldZ);
            
            console.log(`‚úÖ –°–û–ó–î–ê–ù –°–ò–ù–ò–ô –ö–†–£–ì ${index + 1} —Ä–∞–¥–∏—É—Å:`, radius.toFixed(2), `–º –≤ –ø–æ–∑–∏—Ü–∏–∏ (${worldX.toFixed(2)}, 0.05, ${worldZ.toFixed(2)})`);
            
        } else if (fabricObj.type === 'polygon') {
            // –ú–ù–û–ì–û–£–ì–û–õ–¨–ù–ò–ö - –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
            console.log('üî∑ –°–û–ó–î–ê–ï–ú –ú–ù–û–ì–û–£–ì–û–õ–¨–ù–ò–ö!');
            console.log('fabricObj.points:', fabricObj.points);
            console.log('fabricObj.left:', fabricObj.left);
            console.log('fabricObj.top:', fabricObj.top);
            console.log('fabricObj.width:', fabricObj.width);
            console.log('fabricObj.height:', fabricObj.height);
            
            if (fabricObj.points && fabricObj.points.length >= 3) {
                console.log('üî∑ –°–û–ó–î–ê–ï–ú –ù–ê–°–¢–û–Ø–©–ò–ô –ú–ù–û–ì–û–£–ì–û–õ–¨–ù–ò–ö –ò–ó –¢–û–ß–ï–ö!');
                console.log('–¢–æ—á–∫–∏ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞:', fabricObj.points);
                
                // –°–æ–∑–¥–∞–µ–º THREE.js Shape –∏–∑ —Ç–æ—á–µ–∫ Fabric.js
                const shape = new THREE.Shape();
                
                // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—Ç—Ä —Ñ–∏–≥—É—Ä—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                const minX = Math.min(...fabricObj.points.map(p => p.x));
                const maxX = Math.max(...fabricObj.points.map(p => p.x));
                const minY = Math.min(...fabricObj.points.map(p => p.y));
                const maxY = Math.max(...fabricObj.points.map(p => p.y));
                
                const centerX = (minX + maxX) / 2;
                const centerY = (minY + maxY) / 2;
                
                console.log('üìç –¶–µ–Ω—Ç—Ä –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞:', centerX, centerY);
                
                // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ —Å—Ü–µ–Ω—ã
                const scaledPoints = fabricObj.points.map(point => ({
                    x: (point.x - centerX) * scaleX,
                    y: (point.y - centerY) * scaleZ
                }));
                
                console.log('–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏:', scaledPoints);
                
                // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
                shape.moveTo(scaledPoints[0].x, scaledPoints[0].y);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
                for (let i = 1; i < scaledPoints.length; i++) {
                    shape.lineTo(scaledPoints[i].x, scaledPoints[i].y);
                }
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É
                shape.lineTo(scaledPoints[0].x, scaledPoints[0].y);
                
                // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é (–±–µ–∑ —ç–∫—Å—Ç—Ä—É–∑–∏–∏)
                const extrudeSettings = {
                    depth: 0.01, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –¥–ª—è –ø–ª–æ—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∫–∏
                    bevelEnabled: false
                };
                
                const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
                const material = new THREE.MeshStandardMaterial({ 
                    color: 0xFF00FF, // –§–ò–û–õ–ï–¢–û–í–´–ô —Ü–≤–µ—Ç –¥–ª—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
                    roughness: 0.8,
                    metalness: 0.1
                });
                
                mesh = new THREE.Mesh(geometry, material);
                
                // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –∏ —Ä–∞–∑–º–µ—â–∞–µ–º –≤ —Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ canvas
                mesh.rotation.x = -Math.PI / 2; // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤
                const worldX = (fabricObj.left - canvasCenterX) * scaleX;
                const worldZ = (fabricObj.top - canvasCenterY) * scaleZ;
                mesh.position.set(worldX, 0.05, worldZ);
                
                console.log('‚úÖ –°–û–ó–î–ê–ù–ê –ù–ê–°–¢–û–Ø–©–ê–Ø –§–ò–û–õ–ï–¢–û–í–ê–Ø –§–ò–ì–£–†–ê –∏–∑', fabricObj.points.length, '—Ç–æ—á–µ–∫');
            } else {
                console.warn('‚ùå –ú–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–µ –∏–º–µ–µ—Ç —Ç–æ—á–µ–∫');
            }
            
        } else if (fabricObj.type === 'path') {
            // –°–í–û–ë–û–î–ù–û–ï –†–ò–°–û–í–ê–ù–ò–ï - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ —á—Ç–æ –∏ –¥–ª—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
            console.log('üé® –°–û–ó–î–ê–ï–ú –°–í–û–ë–û–î–ù–£–Æ –§–ò–ì–£–†–£ –ò–ó PATH - –∫–∞–∫ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫!');
            console.log('fabricObj.path:', fabricObj.path);
            console.log('fabricObj –ø–æ–ª–Ω–æ—Å—Ç—å—é:', fabricObj);
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É—Ç–∏
                const pathData = fabricObj.path;
                
                if (pathData && Array.isArray(pathData) && pathData.length > 0) {
                    console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ—á–∫–∏ –∏–∑ path –¥–∞–Ω–Ω—ã—Ö:', pathData.length, '–∫–æ–º–∞–Ω–¥');
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ—á–∫–∏ –∏–∑ path –∫–æ–º–∞–Ω–¥
                    const pathPoints = [];
                    let currentX = 0, currentY = 0;
                    
                    pathData.forEach((command, index) => {
                        console.log(`–ö–æ–º–∞–Ω–¥–∞ ${index}:`, command);
                        
                        const cmd = command[0]; // –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã (M, L, C, etc.)
                        
                        switch (cmd) {
                            case 'M': // MoveTo
                                currentX = command[1];
                                currentY = command[2];
                                pathPoints.push({x: currentX, y: currentY});
                                console.log('MoveTo —Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', currentX, currentY);
                                break;
                                
                            case 'L': // LineTo
                                currentX = command[1];
                                currentY = command[2];
                                pathPoints.push({x: currentX, y: currentY});
                                console.log('LineTo —Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', currentX, currentY);
                                break;
                                
                            case 'Q': // QuadraticCurveTo
                                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –∫—Ä–∏–≤–æ–π
                                currentX = command[3];
                                currentY = command[4];
                                pathPoints.push({x: currentX, y: currentY});
                                console.log('QuadraticCurveTo —Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', currentX, currentY);
                                break;
                                
                            case 'C': // BezierCurveTo
                                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –∫—Ä–∏–≤–æ–π
                                currentX = command[5];
                                currentY = command[6];
                                pathPoints.push({x: currentX, y: currentY});
                                console.log('BezierCurveTo —Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', currentX, currentY);
                                break;
                        }
                    });
                    
                    console.log('üìç –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ—á–µ–∫ –∏–∑ path:', pathPoints.length);
                    console.log('üìç –¢–æ—á–∫–∏ path:', pathPoints);
                    
                    if (pathPoints.length >= 3) {
                        console.log('üî∑ –°–û–ó–î–ê–ï–ú –ù–ê–°–¢–û–Ø–©–£–Æ –§–ò–ì–£–†–£ –ò–ó PATH –¢–û–ß–ï–ö!');
                        
                        // –°–æ–∑–¥–∞–µ–º THREE.js Shape –∏–∑ —Ç–æ—á–µ–∫ - –¢–û–¢ –ñ–ï –ö–û–î —á—Ç–æ –∏ –¥–ª—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
                        const shape = new THREE.Shape();
                        
                        // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—Ç—Ä —Ñ–∏–≥—É—Ä—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                        const minX = Math.min(...pathPoints.map(p => p.x));
                        const maxX = Math.max(...pathPoints.map(p => p.x));
                        const minY = Math.min(...pathPoints.map(p => p.y));
                        const maxY = Math.max(...pathPoints.map(p => p.y));
                        
                        const centerX = (minX + maxX) / 2;
                        const centerY = (minY + maxY) / 2;
                        
                        console.log('üìç –¶–µ–Ω—Ç—Ä path —Ñ–∏–≥—É—Ä—ã:', centerX, centerY);
                        
                        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ —Å—Ü–µ–Ω—ã
                        const scaledPoints = pathPoints.map(point => ({
                            x: (point.x - centerX) * scaleX,
                            y: (point.y - centerY) * scaleZ
                        }));
                        
                        console.log('–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ path —Ç–æ—á–∫–∏:', scaledPoints);
                        
                        // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
                        shape.moveTo(scaledPoints[0].x, scaledPoints[0].y);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
                        for (let i = 1; i < scaledPoints.length; i++) {
                            shape.lineTo(scaledPoints[i].x, scaledPoints[i].y);
                        }
                        
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É
                        shape.lineTo(scaledPoints[0].x, scaledPoints[0].y);
                        
                        // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é - –¢–û–¢ –ñ–ï –ö–û–î —á—Ç–æ –∏ –¥–ª—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
                        const extrudeSettings = {
                            depth: 0.01, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –¥–ª—è –ø–ª–æ—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∫–∏
                            bevelEnabled: false
                        };
                        
                        const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
                        const material = new THREE.MeshStandardMaterial({ 
                            color: 0xFFFF00, // –ñ–ï–õ–¢–´–ô —Ü–≤–µ—Ç –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
                            roughness: 0.8,
                            metalness: 0.1
                        });
                        
                        mesh = new THREE.Mesh(geometry, material);
                        
                        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –∏ —Ä–∞–∑–º–µ—â–∞–µ–º –≤ —Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ canvas
                        mesh.rotation.x = -Math.PI / 2; // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤
                        const worldX = (fabricObj.left - canvasCenterX) * scaleX;
                        const worldZ = (fabricObj.top - canvasCenterY) * scaleZ;
                        mesh.position.set(worldX, 0.05, worldZ);
                        
                        console.log('‚úÖ –°–û–ó–î–ê–ù–ê –ù–ê–°–¢–û–Ø–©–ê–Ø –ñ–ï–õ–¢–ê–Ø –°–í–û–ë–û–î–ù–ê–Ø –§–ò–ì–£–†–ê –∏–∑', pathPoints.length, '—Ç–æ—á–µ–∫!');
                    } else {
                        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–≥—É—Ä—ã: ${pathPoints.length}`);
                    }
                } else {
                    throw new Error('Path –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã–µ');
                }
                
            } catch (error) {
                console.warn('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è path —Ñ–∏–≥—É—Ä—ã:', error);
                console.log('üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∫–∞–∫ fallback');
                
                // Fallback - –ø—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                const bounds = {
                    width: fabricObj.width || 100,
                    height: fabricObj.height || 100
                };
                
                const finalWidth = Math.max(bounds.width * scaleX, 1);
                const finalHeight = Math.max(bounds.height * scaleZ, 1);
                
                const geometry = new THREE.BoxGeometry(finalWidth, 0.01, finalHeight); // –ü–ª–æ—Å–∫–∏–π fallback
                const material = new THREE.MeshStandardMaterial({ 
                    color: 0xFFFF00,
                    roughness: 0.8,
                    metalness: 0.1
                });
                
                mesh = new THREE.Mesh(geometry, material);
                const worldX = (fabricObj.left - canvasCenterX) * scaleX;
                const worldZ = (fabricObj.top - canvasCenterY) * scaleZ;
                mesh.position.set(worldX, 0.05, worldZ);
                
                console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∂–µ–ª—Ç—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ fallback:', finalWidth.toFixed(2), 'x', finalHeight.toFixed(2), '–º');
            }
            
        } else {
            // –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü - —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            console.warn('‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü –û–ë–™–ï–ö–¢–ê:', fabricObj.type);
            console.log('–°–æ–∑–¥–∞–µ–º —Å–µ—Ä—É—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞');
            
            const geometry = new THREE.BoxGeometry(5, 0.01, 5); // –ü–ª–æ—Å–∫–∞—è –∑–∞–≥–ª—É—à–∫–∞
            const material = new THREE.MeshStandardMaterial({ 
                color: 0x808080, // –°–ï–†–´–ô —Ü–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
                roughness: 0.8,
                metalness: 0.1
            });
            
            mesh = new THREE.Mesh(geometry, material);
            // –†–ê–ó–ú–ï–©–ê–ï–ú –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü –≤ —Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ canvas
            const worldX = (fabricObj.left - canvasCenterX) * scaleX;
            const worldZ = (fabricObj.top - canvasCenterY) * scaleZ;
            mesh.position.set(worldX, 0.05, worldZ);
            
            console.log('‚úÖ –°–û–ó–î–ê–ù–ê –°–ï–†–ê–Ø –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è —Ç–∏–ø–∞:', fabricObj.type);
        }
        
            if (mesh) {
                mesh.castShadow = false;
                mesh.receiveShadow = true;
                mesh.userData = {
                    isPlayground: true,
                    fabricType: fabricObj.type
                };
                
                playgroundGroup.add(mesh);
                processedObjects++;
                console.log(`‚úÖ –ú–µ—à –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏:`, mesh.position);
            } else {
                console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—à –¥–ª—è —Ç–∏–ø–∞: ${fabricObj.type}`);
            }
            
        } catch (error) {
            console.error(`‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä–µ–∫—Ç–∞ ${index + 1}:`, error);
            console.error('–û–±—ä–µ–∫—Ç:', fabricObj);
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try {
                const errorGeometry = new THREE.BoxGeometry(2, 0.01, 2); // –ü–ª–æ—Å–∫–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫
                const errorMaterial = new THREE.MeshStandardMaterial({ color: 0xFF0000 });
                const errorMesh = new THREE.Mesh(errorGeometry, errorMaterial);
                const worldX = (fabricObj.left - canvasCenterX) * scaleX;
                const worldZ = (fabricObj.top - canvasCenterY) * scaleZ;
                errorMesh.position.set(worldX, 0.05, worldZ);
                playgroundGroup.add(errorMesh);
                processedObjects++;
                console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫—Ä–∞—Å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—à–∏–±–æ—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞');
            } catch (e) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ –∑–∞–≥–ª—É—à–∫—É:', e);
            }
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Å—Ü–µ–Ω—É
    scene.add(playgroundGroup);
    console.log(`\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–ó–î–ê–ù–ò–Ø –ö–ê–°–¢–û–ú–ù–û–ô –ü–õ–û–©–ê–î–ö–ò:`);
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${processedObjects}/${customShape.objects.length}`);
    console.log(`‚úÖ –ú–µ—à–µ–π –≤ –≥—Ä—É–ø–ø–µ: ${playgroundGroup.children.length}`);
    console.log(`‚úÖ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ü–µ–Ω—É: ${playgroundGroup.name}`);
    
    return playgroundGroup;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É —Å –∑–µ–ª–µ–Ω—ã–º —Ñ–æ–Ω–æ–º
 * @param {Object} customShape - –î–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä –∏–∑ Fabric.js
 * @param {Number} width - –®–∏—Ä–∏–Ω–∞ –≤ –º–µ—Ç—Ä–∞—Ö
 * @param {Number} length - –î–ª–∏–Ω–∞ –≤ –º–µ—Ç—Ä–∞—Ö
 * @param {String} color - –¶–≤–µ—Ç –ø–ª–æ—â–∞–¥–∫–∏
 * @returns {Promise<THREE.Group>} –ì—Ä—É–ø–ø–∞ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–æ–π
 */
async function createCustomPlaygroundWithBackground(customShape, width, length, color) {
    console.log('=== –°–û–ó–î–ê–ù–ò–ï –ö–ê–°–¢–û–ú–ù–û–ô –ü–õ–û–©–ê–î–ö–ò –° –§–û–ù–û–ú ===');
    
    try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ playgroundCreator –∏ playgroundUI
        const { createGreenBackground } = await import('./playgroundCreator.js');
        const { updatePlaygroundLabels } = await import('./playgroundUI.js');
        
        // 1. –°–æ–∑–¥–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω (–∫–∞–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ)
        console.log('–°–æ–∑–¥–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω...');
        const greenBackground = createGreenBackground(width, length);
        
        // 2. –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É (–∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
        console.log('–°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É...');
        console.log('customShape –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º:', customShape);
        console.log('customShape.objects –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º:', customShape.objects);
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', customShape?.objects?.length || 0);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if (customShape.objects && customShape.objects.length > 0) {
            customShape.objects.forEach((obj, index) => {
                console.log(`–û–±—ä–µ–∫—Ç ${index + 1}:`, obj);
                console.log(`- –¢–∏–ø: ${obj.type}`);
                console.log(`- ObjectType: ${obj.objectType}`);
                console.log(`- Left: ${obj.left}, Top: ${obj.top}`);
                console.log(`- Width: ${obj.width}, Height: ${obj.height}`);
            });
        }
        
        const customPlayground = createCustomPlayground(customShape, width, length, color);
        
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏:', customPlayground);
        console.log('–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', customPlayground ? customPlayground.constructor.name : 'null');
        
        if (!customPlayground) {
            console.error('‚ùå –ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞!');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É –∫–∞–∫ fallback
            const simplePlane = createSimplePlayground(width, length, color);
            if (simplePlane && simplePlane.position) simplePlane.position.y = 0;
            updatePlaygroundDimensions(width, length);
            
            setTimeout(() => {
                hideLoadingOverlay();
            }, 500);
            return Promise.resolve(simplePlane);
        }
        
        // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –º–µ—Ç–∫–∏
        updatePlaygroundDimensions(width, length);
        updatePlaygroundLabels(width, length);
        
        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏
        if (customPlayground && customPlayground.userData) {
            customPlayground.userData.groundColor = color;
            customPlayground.userData.isCustomPlayground = true;
            customPlayground.userData.customShape = customShape;
        }
        
        console.log('‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ —Å —Ñ–æ–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
        setTimeout(() => {
            hideLoadingOverlay();
        }, 500);
        
        return Promise.resolve(customPlayground);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏:', error);
        
        // Fallback to standard playground
        const simplePlane = createSimplePlayground(width, length, color);
        if (simplePlane && simplePlane.position) simplePlane.position.y = 0;
        updatePlaygroundDimensions(width, length);
        
        setTimeout(() => {
            hideLoadingOverlay();
        }, 500);
        
        return Promise.resolve(simplePlane);
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏
 */
function createGreenBackgroundForCustom(group, width, length) {
    const size = 1000;
    const circleGeometry = new THREE.CircleGeometry(size / 2, 64);
    
    const textureLoader = new THREE.TextureLoader();
    const grassTexture = textureLoader.load('textures/grass/grass_texture.png');
    grassTexture.wrapS = THREE.RepeatWrapping;
    grassTexture.wrapT = THREE.RepeatWrapping;
    
    const repeats = size / 2;
    grassTexture.repeat.set(repeats, repeats);
    grassTexture.anisotropy = 16;
    
    const grassMaterial = new THREE.MeshStandardMaterial({
        map: grassTexture,
        color: 0x4CAF50,
        roughness: 0.7,
        metalness: 0.1,
        side: THREE.DoubleSide
    });
    
    const grassMesh = new THREE.Mesh(circleGeometry, grassMaterial);
    grassMesh.rotation.x = -Math.PI / 2;
    grassMesh.position.y = -0.01;
    grassMesh.name = 'green_background';
    grassMesh.userData = { isGround: true };
    
    scene.add(grassMesh);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç THREE.js –º–µ—à –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Fabric.js
 */
function createMeshFromFabricObject(fabricObject, scaleX, scaleZ, color) {
    const colorMap = {
        '—Å–µ—Ä—ã–π': 0xD9D9D9,
        '–∑–µ–ª–µ–Ω—ã–π': 0x2E7D32,
        '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 0x5D4037,
        '—á–µ—Ä–Ω—ã–π': 0x333333
    };
    
    const materialColor = colorMap[color] || 0xD9D9D9;
    
    try {
        let mesh = null;
        
        switch (fabricObject.type) {
            case 'polygon':
            case 'group':
                mesh = createPolygonMesh(fabricObject, scaleX, scaleZ, materialColor);
                break;
            case 'rect':
                mesh = createRectangleMesh(fabricObject, scaleX, scaleZ, materialColor);
                break;
            case 'circle':
                mesh = createCircleMesh(fabricObject, scaleX, scaleZ, materialColor);
                break;
            case 'path':
                mesh = createPathMesh(fabricObject, scaleX, scaleZ, materialColor);
                break;
            default:
                console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø:', fabricObject.type);
                return null;
        }
        
        return mesh;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—à–∞:', error);
        return null;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–µ—à –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
 */
function createPolygonMesh(fabricObject, scaleX, scaleZ, color) {
    let points = [];
    
    if (fabricObject.type === 'group' && fabricObject.objects) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –æ–±—ä–µ–∫—Ç–æ–≤
        fabricObject.objects.forEach(obj => {
            if (obj.points) {
                const groupPoints = obj.points.map(p => ({
                    x: (p.x + obj.left) * scaleX,
                    y: (p.y + obj.top) * scaleZ
                }));
                points = points.concat(groupPoints);
            }
        });
    } else if (fabricObject.points) {
        points = fabricObject.points.map(p => ({
            x: (p.x + fabricObject.left) * scaleX,
            y: (p.y + fabricObject.top) * scaleZ
        }));
    }
    
    if (points.length < 3) return null;
    
    // –°–æ–∑–¥–∞–µ–º THREE.js Shape
    const shape = new THREE.Shape();
    shape.moveTo(points[0].x, points[0].y);
    for (let i = 1; i < points.length; i++) {
        shape.lineTo(points[i].x, points[i].y);
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —Å —ç–∫—Å—Ç—Ä—É–∑–∏–µ–π
    const extrudeSettings = {
        depth: 0.1,
        bevelEnabled: false
    };
    
    const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
    const material = new THREE.MeshStandardMaterial({ 
        color: color,
        roughness: 0.7,
        metalness: 0.1 
    });
    
    const mesh = new THREE.Mesh(geometry, material);
    mesh.rotation.x = -Math.PI / 2;
    mesh.userData = { 
        isPlayground: true,
        fabricType: 'polygon'
    };
    
    return mesh;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–µ—à –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
 */
function createRectangleMesh(fabricObject, scaleX, scaleZ, color) {
    const width = fabricObject.width * fabricObject.scaleX * scaleX;
    const height = fabricObject.height * fabricObject.scaleY * scaleZ;
    
    const geometry = new THREE.BoxGeometry(width, 0.1, height);
    const material = new THREE.MeshStandardMaterial({ 
        color: color,
        roughness: 0.7,
        metalness: 0.1 
    });
    
    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.set(
        fabricObject.left * scaleX,
        0.05,
        fabricObject.top * scaleZ
    );
    mesh.userData = { 
        isPlayground: true,
        fabricType: 'rectangle'
    };
    
    return mesh;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–µ—à –∫—Ä—É–≥–∞
 */
function createCircleMesh(fabricObject, scaleX, scaleZ, color) {
    const radius = fabricObject.radius * fabricObject.scaleX * Math.max(scaleX, scaleZ);
    
    const geometry = new THREE.CylinderGeometry(radius, radius, 0.1, 32);
    const material = new THREE.MeshStandardMaterial({ 
        color: color,
        roughness: 0.7,
        metalness: 0.1 
    });
    
    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.set(
        fabricObject.left * scaleX,
        0.05,
        fabricObject.top * scaleZ
    );
    mesh.userData = { 
        isPlayground: true,
        fabricType: 'circle'
    };
    
    return mesh;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–µ—à –∏–∑ Path (—Å–≤–æ–±–æ–¥–Ω–æ–µ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ)
 */
function createPathMesh(fabricObject, scaleX, scaleZ, color) {
    // –î–ª—è Path –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–∞—Ä—Å–∏—Ç—å SVG path
    const bounds = fabricObject.getBounds ? fabricObject.getBounds() : {
        left: fabricObject.left,
        top: fabricObject.top,
        width: fabricObject.width || 50,
        height: fabricObject.height || 50
    };
    
    const width = bounds.width * scaleX;
    const height = bounds.height * scaleZ;
    
    const geometry = new THREE.BoxGeometry(width, 0.1, height);
    const material = new THREE.MeshStandardMaterial({ 
        color: color,
        roughness: 0.7,
        metalness: 0.1 
    });
    
    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.set(
        bounds.left * scaleX,
        0.05,
        bounds.top * scaleZ
    );
    mesh.userData = { 
        isPlayground: true,
        fabricType: 'path'
    };
    
    return mesh;
}
