/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç
 */
import { API_BASE_URL } from './api/serverConfig.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π
function applyNewStyles() {
    // –°—Ç–∏–ª–∏ —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ styles.css, –ø–æ—ç—Ç–æ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å
    console.log('Styles are already included in styles.css');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π–¥–±–∞—Ä–∞
async function createNewSidebar() {
    console.log('Creating new sidebar...');
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–π–¥–±–∞—Ä
    const sidebar = document.getElementById('sidebar');
    if (!sidebar) {
        console.error('Sidebar not found!');
        return;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Å—Ç–∏–ª–µ–π
    sidebar.classList.add('categories-sidebar');
    
    // –û—á–∏—â–∞–µ–º —Å–∞–π–¥–±–∞—Ä
    sidebar.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π–¥–±–∞—Ä–∞
    const sidebarHeader = document.createElement('div');
    sidebarHeader.className = 'sidebar-header';
    sidebarHeader.innerHTML = `
        <div class="back-button">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M15 6L9 12L15 18" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </div>
        <h3 class="sidebar-title">–ö–ê–¢–ï–ì–û–†–ò–ò –û–ë–™–ï–ö–¢–û–í</h3>
    `;
    
    // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ö–ª–æ–ø–Ω—É—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const verticalTitle = document.createElement('div');
    verticalTitle.className = 'vertical-title';
    verticalTitle.textContent = '–ö–ê–¢–ï–ì–û–†–ò–ò –û–ë–™–ï–ö–¢–û–í';
    
    const categoriesList = document.createElement('div');
    categoriesList.className = 'categories-list';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ sessionStorage
    const modelsData = JSON.parse(sessionStorage.getItem('models') || '[]');
    const userId = sessionStorage.getItem('userId');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
        let sessionData = null;
        const sessionResponse = await fetch(`${API_BASE_URL}/session/${userId}`);
        if (sessionResponse.ok) {
            const { session } = await sessionResponse.json();
            sessionData = session;
            console.log('Loaded session data:', sessionData);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –ë–î
        const matchResponse = await fetch(`${API_BASE_URL}/models/match`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ models: modelsData }),
        });
        
        if (!matchResponse.ok) {
            throw new Error('Failed to match models with database');
        }
        
        const { models: dbModels } = await matchResponse.json();
        console.log('Matched models from database:', dbModels);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const combinedModels = dbModels.map(dbModel => {
            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å –∏–∑ modelsData
            const jsonModel = modelsData.find(m => m.article === dbModel.article);
            
            return {
                ...dbModel,
                name: `${dbModel.name}.glb`,
                quantity: jsonModel ? jsonModel.quantity : 0,
                isAvailable: true // –í—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑ –ë–î —Å—á–∏—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
            };
        });

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const modelsByCategory = {};
        combinedModels.forEach(model => {
            const category = model.category || 'other';
            if (!modelsByCategory[category]) {
                modelsByCategory[category] = [];
            }
            modelsByCategory[category].push(model);
        });

        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –º–æ–¥–µ–ª–µ–π
        const uniqueCategories = [...new Set(combinedModels.map(model => model.category || 'other'))];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        uniqueCategories.forEach(categoryId => {
            const categoryElement = document.createElement('div');
            categoryElement.className = 'category';
            categoryElement.dataset.category = categoryId;
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const categoryHeader = document.createElement('div');
            categoryHeader.className = 'category-header';
            categoryHeader.innerHTML = `
                <span class="category-name">${categoryId}</span>
                <span class="category-arrow">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9 18L15 12L9 6" stroke="#FF7E3D" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </span>
            `;
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–¥–µ–ª–µ–π
            const modelsContainer = document.createElement('div');
            modelsContainer.className = 'models-container';
            
            // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const categoryModels = modelsByCategory[categoryId] || [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            categoryModels.forEach(model => {
                const modelElement = document.createElement('div');
                modelElement.className = 'model';
                modelElement.dataset.modelId = model.id;
                modelElement.setAttribute('draggable', model.isAvailable);
                modelElement.setAttribute('data-model', model.name);
                modelElement.setAttribute('data-article', model.article);
                modelElement.setAttribute('data-quantity', model.quantity);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏
                if (model.quantity === 0) {
                    modelElement.classList.add('blurred');
                    modelElement.style.filter = 'blur(2px)';
                    modelElement.style.opacity = '0.9';
                    modelElement.style.pointerEvents = 'none';
                }
                
                modelElement.innerHTML = `
                    <div class="model-image">
                        <img src="textures/${model.name.replace('.glb', '.png')}" alt="${model.description}">
                    </div>
                    <div class="model-article">${model.article}</div>
                    <div class="model-title">${model.description}</div>
                    <div class="model-placement">–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–ª–æ—â–∞–¥–∫—É: 0 –∏–∑ ${model.quantity}</div>
                    <div class="model-specs">
                        <div class="model-spec">
                            <span class="model-spec-icon">üë§</span>
                            <span>${model.age || '5+ –ª–µ—Ç'}</span>
                        </div>
                        <div class="model-spec">
                            <span class="model-spec-icon">üìè</span>
                            <span>${model.size || '63.2 –º¬≤'}</span>
                        </div>
                    </div>
                `;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ drag-and-drop
                modelElement.addEventListener('dragstart', function(event) {
                    event.dataTransfer.setData('model', model.name);
                    event.dataTransfer.setData('article', model.article);
                    console.log('Drag started for model:', model.name);
                });            
                modelsContainer.appendChild(modelElement);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categoryElement.appendChild(categoryHeader);
            categoryElement.appendChild(modelsContainer);
            categoriesList.appendChild(categoryElement);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categoryHeader.addEventListener('click', function() {
                // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
                if (categoryElement.classList.contains('active')) {
                    categoryElement.classList.remove('active');
                } else {
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    categoryElement.classList.add('active');
                }
            });
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–∞–π–¥–±–∞—Ä
        sidebar.appendChild(sidebarHeader);
        sidebar.appendChild(categoriesList);
        sidebar.appendChild(verticalTitle);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏—è)
        const backButton = sidebarHeader.querySelector('.back-button');
        backButton.addEventListener('click', function() {
            console.log('Toggle sidebar collapse');
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å collapsed –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞
            sidebar.classList.toggle('collapsed');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            if (sidebar.classList.contains('collapsed')) {
                localStorage.setItem('sidebar_collapsed', 'true');
            } else {
                localStorage.setItem('sidebar_collapsed', 'false');
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        if (localStorage.getItem('sidebar_collapsed') === 'true') {
            sidebar.classList.add('collapsed');
        }
        
        console.log('New sidebar created!');
    } catch (error) {
        console.error('Error creating sidebar:', error);
        sidebar.innerHTML = '<div class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π</div>';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document.addEventListener('DOMContentLoaded', function() {
    console.log('Initializing sidebar v2...');
    applyNewStyles();
    createNewSidebar();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { applyNewStyles, createNewSidebar };