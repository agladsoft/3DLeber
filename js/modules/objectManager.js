/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ
 */
import * as THREE from 'three';
import { scene } from '../scene.js';
import { getLoaderByExtension } from './loaders.js';
import { saveInitialPosition } from './positionHelpers.js';
import { autoConvertUnits } from './objectOperations.js';
import { checkAllObjectsPositions } from './collisionDetection.js';
import { showModelDimensions } from './dimensionDisplay/index.js';
import { updateSafetyZonesVisibility } from '../core/safetyManager.js';
import { API_BASE_URL } from '../api/serverConfig.js'
import { updateModelPlacementCounter } from '../sidebar.js';

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
export let placedObjects = [];

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
const modelCache = new Map();
const MAX_CACHE_SIZE = 20;

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è 3D preloader'–æ–≤
const scenePreloaders = new Map();

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç UI —Å –±–∞—Ç—á–∏–Ω–≥–æ–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏  
 * @param {number} delta - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
 */
async function updateSidebarWithBatching(modelName, delta) {
    try {
        const { batchUIUpdate } = await import('../ui/dragAndDrop.js');
        batchUIUpdate(modelName, delta);
    } catch (error) {
        console.error('–ë–∞—Ç—á–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', error);
        updateSidebarInstantly(modelName, delta);
    }
}

/**
 * –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –≤ sidebar –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤ (fallback)
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏
 * @param {number} delta - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (+1 –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è, -1 –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è)
 */
function updateSidebarInstantly(modelName, delta) {
    // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ async –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (window.updateModelCounterDirectly) {
        window.updateModelCounterDirectly(modelName, delta);
    } else {
        import('../sidebar.js').then(sidebarModule => {
            if (sidebarModule.updateModelCounterDirectly) {
                sidebarModule.updateModelCounterDirectly(modelName, delta);
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                window.updateModelCounterDirectly = sidebarModule.updateModelCounterDirectly;
            }
        });
    }
}

// –°—á–µ—Ç—á–∏–∫ –¥–ª—è ID –æ–±—ä–µ–∫—Ç–æ–≤
let objectIdCounter = 0;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –∫ –º–æ–¥–µ–ª—è–º
const MODEL_PATHS = {
    glb: 'models'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
function getModelPath(fileName) {
    return `${MODEL_PATHS.glb}/${fileName}`;
}

function processLoadedModel(container, modelName, position, isRestoring = false) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –º–æ–¥–µ–ª–∏
    if (position) {
        container.position.copy(position);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ userData –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
        container.userData.coordinates = {
            x: position.x.toFixed(2),
            y: position.y.toFixed(2),
            z: position.z.toFixed(2)
        };
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
    container.userData.id = generateObjectId();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –≤ userData
    container.userData.modelName = modelName;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤ 0
    container.rotation.y = 0;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    container.userData.isPlacedObject = true;
    container.userData.created = new Date().toISOString();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    container.name = `${modelName}_${container.userData.id}`;
    
    // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Å—Ü–µ–Ω—É (—ç—Ç–æ –±—ã–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
    scene.add(container);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    const box = new THREE.Box3().setFromObject(container);
    const size = new THREE.Vector3();
    box.getSize(size);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏
    container.userData.realWidth = size.x;
    container.userData.realHeight = size.y;
    container.userData.realDepth = size.z;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    const maxDimension = Math.max(size.x, size.y, size.z);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
    container.userData.originalSize = maxDimension;
    container.userData.currentSize = maxDimension; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–± –æ–±—ä–µ–∫—Ç–∞ –≤ 1.0 (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
    container.scale.set(1, 1, 1);
    
    console.log(`–ú–æ–¥–µ–ª—å ${modelName} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏: ${container.userData.realWidth.toFixed(2)}√ó${container.userData.realHeight.toFixed(2)}√ó${container.userData.realDepth.toFixed(2)}–º`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏–∑ –º–º –≤ –º
    const wasConverted = autoConvertUnits(container);
    if (wasConverted) {
        console.log(`–ú–æ–¥–µ–ª—å ${modelName}: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –º–º –≤ –º. –ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${container.userData.realWidth.toFixed(2)}√ó${container.userData.realHeight.toFixed(2)}√ó${container.userData.realDepth.toFixed(2)}–º`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–≤–æ—Ä–æ—Ç (–¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏ Esc)
    saveInitialPosition(container);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    placedObjects.push(container);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
    console.log("–†–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:", {
        id: container.userData.id,
        name: modelName,
        coordinates: container.userData.coordinates,
        dimensions: {
            width: container.userData.realWidth.toFixed(2),
            height: container.userData.realHeight.toFixed(2),
            depth: container.userData.realDepth.toFixed(2)
        }
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    console.log("–í—Å–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:", placedObjects.length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∫–æ–ª–ª–∏–∑–∏–∏
    checkAllObjectsPositions();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ –ø–ª–æ—â–∞–¥–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–∫—Ä—ã–ª —Ä–∞–∑–º–µ—Ä—ã
    if (localStorage.getItem('dimensionLabelsHidden') !== 'true') {
        showModelDimensions(container);
    }
    
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–æ–Ω
    updateSafetyZonesVisibility();
    
    // –°–∫—Ä—ã–≤–∞–µ–º preloader —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ)
    if (!isRestoring) {
        import('../sidebar.js').then(({ hideModelPreloader }) => {
            hideModelPreloader(modelName);
            console.log(`Preloader —Å–∫—Ä—ã—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName} –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è processLoadedModel`);
        }).catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ preloader:', error);
        });
    }
    
    console.log(`–ú–æ–¥–µ–ª—å ${modelName} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å ID: ${container.userData.id}`);
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç environment map –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
export function updateMaterialsEnvironmentMap() {
    if (!scene.environment) {
        console.log('Environment map –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
        return;
    }
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º environment map –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤');
    
    placedObjects.forEach(container => {        
        container.traverse((child) => {
            if (child.isMesh && child.material) {
                const materials = Array.isArray(child.material) ? child.material : [child.material];
                
                materials.forEach((material) => {
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º environment map –∏–∑ —Å—Ü–µ–Ω—ã –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏–π
                    material.envMap = scene.environment;
                    material.envMapIntensity = 1.0;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º
                    const isWood = material.name.includes('–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞');
                    if (isWood) {
                        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ—Ä–µ–≤–∞ - –¥–µ–ª–∞–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —è—Ä—á–µ
                        material.envMapIntensity = 2.5;
                        material.emissive = new THREE.Color(0x4a2a0a);
                        material.emissiveIntensity = 0.35;
                        material.roughness = Math.max(0.2, material.roughness - 0.3);
                        material.metalness = Math.min(0.15, material.metalness + 0.1);
                        
                        // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–µ—Ç–ª—è–µ–º –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                        if (material.color && material.color.getHSL) {
                            const hsl = {};
                            material.color.getHSL(hsl);
                            if (hsl.l < 0.7) {
                                material.color.setHSL(hsl.h, Math.max(0.3, hsl.s), Math.min(0.8, hsl.l + 0.4));
                            }
                        }
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é —è—Ä–∫–æ—Å—Ç—å
                        if (material.color) {
                            material.color.multiplyScalar(1.3);
                        }
                    }
                    
                    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                    const isGlass = (
                        (material.transparent && material.opacity < 1.0) ||
                        (material.transmission && material.transmission > 0) ||
                        (material.ior && material.ior !== 1.5) ||
                        (material.clearcoat && material.clearcoat > 0.5) ||
                        (material.name && (
                            material.name.toLowerCase().includes('glass') ||
                            material.name.toLowerCase().includes('crystal') ||
                            material.name.toLowerCase().includes('transparent')
                        ))
                    );
                    
                    // –î–ª—è —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                    if (isGlass) {                        
                        if (!material.transmission || material.transmission === 0) {
                            material.transmission = 0.95;
                        }
                        
                        if (material.ior === 1.5) {
                            material.ior = 1.52;
                        }
                        
                        material.refractionRatio = 0.98;
                        material.envMapIntensity = 1.8;
                        material.reflectivity = material.reflectivity || 0.5;
                        
                        if (material.isMeshPhysicalMaterial) {
                            material.transmission = Math.max(material.transmission, 0.9);
                            material.thickness = material.thickness || 0.5;
                        }
                    }
                    // –î–ª—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                    else if (material.metalness > 0.5) {
                        material.envMapIntensity = 2.0;
                    }
                    
                    material.needsUpdate = true;
                });
            }
        });
    });
    
    console.log(`‚úÖ Environment map –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${placedObjects.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π
 */
export function clearModelCache() {
    console.log(`–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≤ –∫—ç—à–µ: ${modelCache.size}`);
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª—å—é –≤ –∫—ç—à–µ
    modelCache.forEach((model, modelName) => {
        if (model && model.traverse) {
            model.traverse((child) => {
                if (child.isMesh) {
                    if (child.geometry) child.geometry.dispose();
                    if (child.material) {
                        if (Array.isArray(child.material)) {
                            child.material.forEach(mat => mat.dispose());
                        } else {
                            child.material.dispose();
                        }
                    }
                }
            });
        }
    });
    
    modelCache.clear();
    console.log("–ö—ç—à –º–æ–¥–µ–ª–µ–π –æ—á–∏—â–µ–Ω");
}

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–º –∫—ç—à–∞, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä—ã–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
 */
function manageCacheSize() {
    if (modelCache.size > MAX_CACHE_SIZE) {
        // –£–¥–∞–ª—è–µ–º —Å–∞–º—É—é –ø–µ—Ä–≤—É—é (—Å—Ç–∞—Ä—É—é) –º–æ–¥–µ–ª—å –∏–∑ –∫—ç—à–∞
        const firstKey = modelCache.keys().next().value;
        const modelToRemove = modelCache.get(firstKey);
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        if (modelToRemove && modelToRemove.traverse) {
            modelToRemove.traverse((child) => {
                if (child.isMesh) {
                    if (child.geometry) child.geometry.dispose();
                    if (child.material) {
                        if (Array.isArray(child.material)) {
                            child.material.forEach(mat => mat.dispose());
                        } else {
                            child.material.dispose();
                        }
                    }
                }
            });
        }
        
        modelCache.delete(firstKey);
        console.log(`–£–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å –∏–∑ –∫—ç—à–∞: ${firstKey}. –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${modelCache.size}`);
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
 * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
 */
export function generateObjectId() {
    return `obj_${Date.now()}_${++objectIdCounter}`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç 3D preloader –Ω–∞ —Å—Ü–µ–Ω–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
 * @param {string} objectId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–±—ä–µ–∫—Ç–∞
 * @param {THREE.Vector3} position - –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è preloader'–∞
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 * @returns {THREE.Group} –ì—Ä—É–ø–ø–∞ —Å preloader'–æ–º
 */
export function createScenePreloader(objectId, position, modelName = '') {
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è preloader'–∞
    const preloaderGroup = new THREE.Group();
    preloaderGroup.name = `preloader_${objectId}`;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞ –≤—ã—Å–æ—Ç—É –ø–æ–ª–æ–≤–∏–Ω—ã –∫—É–±–∞, —á—Ç–æ–±—ã –æ–Ω —Å—Ç–æ—è–ª –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    const cubeHeight = 1.5;
    preloaderGroup.position.set(
        position.x, 
        position.y + cubeHeight / 2, // –ü–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤—ã—Å–æ—Ç—ã
        position.z
    );
    
    // –°–æ–∑–¥–∞–µ–º wireframe –∫—É–± (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
    const geometry = new THREE.BoxGeometry(1.5, cubeHeight, 1.5);
    const wireframeMaterial = new THREE.MeshBasicMaterial({
        color: 0xFFFFFF, // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –∫–∞–∫ –≤ CSS
        wireframe: true,
        transparent: true,
        opacity: 0.8
    });
    
    const wireframeCube = new THREE.Mesh(geometry, wireframeMaterial);
    preloaderGroup.add(wireframeCube);
    
    // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π solid –∫—É–± –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    const solidGeometry = new THREE.BoxGeometry(1.2, cubeHeight * 0.8, 1.2);
    const solidMaterial = new THREE.MeshBasicMaterial({
        color: 0xFFFFFF,
        transparent: true,
        opacity: 0.2
    });
    
    const solidCube = new THREE.Mesh(solidGeometry, solidMaterial);
    preloaderGroup.add(solidCube);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    preloaderGroup.userData.isPreloader = true;
    preloaderGroup.userData.objectId = objectId;
    preloaderGroup.userData.modelName = modelName;
    preloaderGroup.userData.created = Date.now();
    preloaderGroup.userData.animationActive = true;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
    scene.add(preloaderGroup);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    scenePreloaders.set(objectId, preloaderGroup);
    
    console.log(`3D Preloader —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId} (${modelName}) –≤ –ø–æ–∑–∏—Ü–∏–∏:`, preloaderGroup.position);
    
    return preloaderGroup;
}

/**
 * –£–¥–∞–ª—è–µ—Ç 3D preloader —Å —Å—Ü–µ–Ω—ã
 * @param {string} objectId - ID –æ–±—ä–µ–∫—Ç–∞
 */
export function removeScenePreloader(objectId) {
    const preloader = scenePreloaders.get(objectId);
    if (preloader) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        preloader.userData.animationActive = false;
        
        // –£–¥–∞–ª—è–µ–º —Å —Å—Ü–µ–Ω—ã
        scene.remove(preloader);
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        preloader.traverse((child) => {
            if (child.isMesh) {
                if (child.geometry) child.geometry.dispose();
                if (child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach(mat => mat.dispose());
                    } else {
                        child.material.dispose();
                    }
                }
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        scenePreloaders.delete(objectId);
        
        console.log(`3D Preloader —É–¥–∞–ª–µ–Ω –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId}`);
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ 3D preloader'—ã —Å —Å—Ü–µ–Ω—ã
 */
export function removeAllScenePreloaders() {
    console.log(`–£–¥–∞–ª—è–µ–º –≤—Å–µ 3D preloader'—ã (${scenePreloaders.size} —à—Ç—É–∫)`);
    
    scenePreloaders.forEach((preloader, objectId) => {
        removeScenePreloader(objectId);
    });
    
    scenePreloaders.clear();
    console.log('–í—Å–µ 3D preloader\'—ã —É–¥–∞–ª–µ–Ω—ã');
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ —Å—Ü–µ–Ω–µ
 * @param {string} modelName - –ò–º—è —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
 * @param {THREE.Vector3} position - –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
 * @param {boolean} isRestoring - –§–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –ë–î)
 * @returns {Promise} Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
 */
export async function loadAndPlaceModel(modelName, position, isRestoring = false) {
    console.log("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:", modelName, "–≤ –ø–æ–∑–∏—Ü–∏—é:", position);
    
    // –£–±–∏—Ä–∞–µ–º optimistic update –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ refreshAllModelCounters
    // –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, —á—Ç–æ –∏—Å–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ë–î
    
    return new Promise((resolve, reject) => {
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            const fileExtension = modelName.substring(modelName.lastIndexOf('.')).toLowerCase();
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
            const modelPath = getModelPath(modelName);
            
            console.log("–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏:", modelPath);
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏
            const container = new THREE.Group();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if (position) {
                container.position.copy(position);
                container.userData.coordinates = {
                    x: position.x.toFixed(2),
                    y: position.y.toFixed(2),
                    z: position.z.toFixed(2)
                };
            } else {
                // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Ü–µ–Ω—Ç—Ä —Å—Ü–µ–Ω—ã
                container.position.set(0, 0, 0);
                container.userData.coordinates = { x: "0.00", y: "0.00", z: "0.00" };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∫—ç—à–µ
            if (modelCache.has(modelName)) {
                console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ –∫—ç—à–∞:", modelName);
                const cachedModel = modelCache.get(modelName);
                container.add(cachedModel.clone());
                processLoadedModel(container, modelName, position, isRestoring);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                if (!isRestoring) {
                    updateSessionForNewObject(container, modelName)
                        .then(async () => {
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ sidebar –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                            try {
                                const { refreshAllModelCounters } = await import('../sidebar.js');
                                await refreshAllModelCounters();
                            } catch (error) {
                                console.error('Error updating sidebar counters for cached model:', error);
                            }
                            resolve(container);
                        })
                        .catch(reject);
                } else {
                    resolve(container);
                }
                return;
            }

            // –í—ã–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
            console.log("–ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞:", fileExtension);
            const { loader, method } = getLoaderByExtension(fileExtension);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
            loader.load(
                modelPath,
                (result) => {
                    try {
                        let modelObject;
                        
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                        if (method === 'gltf') {
                            modelObject = result.scene;
                            
                            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
                            modelObject.traverse((child) => {
                                if (child.isMesh) {
                                    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏
                                    if (child.geometry) {
                                        child.geometry.computeBoundingSphere();
                                        child.geometry.computeBoundingBox();
                                        
                                        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BufferGeometry
                                        if (child.geometry.isBufferGeometry) {
                                            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤–µ—Ä—à–∏–Ω—ã
                                            child.geometry = child.geometry.clone();
                                            child.geometry.attributes.position.needsUpdate = true;
                                            
                                            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
                                            if (child.geometry.index) {
                                                child.geometry.setDrawRange(0, child.geometry.index.count);
                                            }
                                            
                                            // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                                            child.geometry.computeVertexNormals();
                                        }
                                    }

                                    child.castShadow = true;
                                    child.receiveShadow = true;
                                    
                                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–∞–ª–ª–∞ –∏ —Å—Ç–µ–∫–ª–∞
                                    if (child.material) {
                                        // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                                        const materials = Array.isArray(child.material) ? child.material : [child.material];
                                        
                                        materials.forEach((material) => {
                                            
                                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º environment map –∏–∑ —Å—Ü–µ–Ω—ã –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏–π
                                            if (scene.environment) {
                                                material.envMap = scene.environment;
                                                material.envMapIntensity = 1.0;
                                            }

                                            const isWood = material.name.includes('–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞');
                                            if (isWood) {
                                                // –î–µ–ª–∞–µ–º –¥–µ—Ä–µ–≤–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —è—Ä—á–µ
                                                material.envMapIntensity = 2.5; // –°–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Ä–∞–∂–µ–Ω–∏—è
                                                material.emissive = new THREE.Color(0x4a2a0a); // –ë–æ–ª–µ–µ —è—Ä–∫–∏–π —Ç–µ–ø–ª—ã–π –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
                                                material.emissiveIntensity = 0.35; // –ó–∞–º–µ—Ç–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
                                                material.roughness = Math.max(0.2, material.roughness - 0.3); // –ú–µ–Ω–µ–µ —à–µ—Ä–æ—Ö–æ–≤–∞—Ç—ã–π
                                                material.metalness = Math.min(0.15, material.metalness + 0.1); // –ë–æ–ª—å—à–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–≥–æ –±–ª–µ—Å–∫–∞
                                                
                                                // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–µ—Ç–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                                                if (material.color && material.color.getHSL) {
                                                    const hsl = {};
                                                    material.color.getHSL(hsl);
                                                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —è—Ä–∫–æ—Å—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
                                                    if (hsl.l < 0.7) {
                                                        material.color.setHSL(hsl.h, Math.max(0.3, hsl.s), Math.min(0.8, hsl.l + 0.4));
                                                    }
                                                }
                                                
                                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é —è—Ä–∫–æ—Å—Ç—å —á–µ—Ä–µ–∑ –º–Ω–æ–∂–∏—Ç–µ–ª—å
                                                if (material.color) {
                                                    material.color.multiplyScalar(1.3);
                                                }
                                            }
                                            
                                            // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                                            const isGlass = (
                                                (material.transparent && material.opacity < 1.0) ||
                                                (material.transmission && material.transmission > 0) ||
                                                (material.ior && material.ior !== 1.5) ||
                                                (material.clearcoat && material.clearcoat > 0.5) ||
                                                (material.name && (
                                                    material.name.toLowerCase().includes('glass') ||
                                                    material.name.toLowerCase().includes('crystal') ||
                                                    material.name.toLowerCase().includes('transparent')
                                                ))
                                            );
                                            
                                            // –î–ª—è —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                                            if (isGlass) {                                                
                                                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–µ–∫–ª–∞
                                                if (!material.transmission || material.transmission === 0) {
                                                    material.transmission = 0.95; // –í–∫–ª—é—á–∞–µ–º transmission –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                                                }
                                                
                                                if (material.ior === 1.5) {
                                                    material.ior = 1.52; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è —Å—Ç–µ–∫–ª–∞
                                                }
                                                
                                                material.refractionRatio = 0.98;
                                                material.envMapIntensity = 1.8; // –£—Å–∏–ª–∏–≤–∞–µ–º –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç–µ–∫–ª–∞
                                                material.reflectivity = material.reflectivity || 0.5;
                                                
                                                // –ï—Å–ª–∏ —ç—Ç–æ MeshPhysicalMaterial, –∏—Å–ø–æ–ª—å–∑—É–µ–º transmission
                                                if (material.isMeshPhysicalMaterial) {
                                                    material.transmission = Math.max(material.transmission, 0.9);
                                                    material.thickness = material.thickness || 0.5;
                                                }
                                            }
                                            // –î–ª—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                                            else if (material.metalness > 0.5) {
                                                material.envMapIntensity = 2.0; // –£—Å–∏–ª–∏–≤–∞–µ–º –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–µ—Ç–∞–ª–ª–∞
                                            }
                                            
                                            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                                            material.needsUpdate = true;
                                        });
                                    }

                                    // –ï—Å–ª–∏ —ç—Ç–æ –∑–æ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –±–µ–ª—ã–π
                                    if (child.name && child.name.includes('safety_zone')) {
                                        if (child.material) {
                                            const newMaterial = new THREE.MeshStandardMaterial({
                                                color: 0xFFFFFF,
                                                transparent: false,
                                                opacity: 1.0,
                                                metalness: 0,
                                                roughness: 0.5,
                                                emissive: 0xFFFFFF,
                                                emissiveIntensity: 0.2
                                            });
                                            child.material = newMaterial;
                                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
                                            child.visible = localStorage.getItem('safetyZoneHidden') !== 'true';
                                        }
                                    }
                                }
                            });
                            
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –∫—ç—à
                            modelCache.set(modelName, modelObject.clone());
                            manageCacheSize();
                            
                            container.add(modelObject);
                            console.log("GLTF –º–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä");
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç
                        if (container.children.length === 0) {
                            console.error("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—É—Å—Ç, –Ω–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤");
                            reject(new Error("Container is empty, no child objects"));
                            return;
                        }
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å (–≤–∫–ª—é—á–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ü–µ–Ω—É)
                        processLoadedModel(container, modelName, position, isRestoring);

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                        if (!isRestoring) {
                            updateSessionForNewObject(container, modelName)
                                .then(async () => {
                                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ sidebar –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                                    try {
                                        const { refreshAllModelCounters } = await import('../sidebar.js');
                                        await refreshAllModelCounters();
                                    } catch (error) {
                                        console.error('Error updating sidebar counters:', error);
                                    }
                                    resolve(container);
                                })
                                .catch(error => {
                                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
                                    reject(error);
                                });
                        } else {
                            resolve(container);
                        }
                        
                    } catch (processingError) {
                        console.error("Error processing loaded model:", processingError);
                        reject(processingError);
                    }
                },
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ (–ø—Ä–æ–≥—Ä–µ—Å—Å)
                (xhr) => {
                    const percentComplete = (xhr.loaded / xhr.total) * 100;
                    console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ${modelName}: ${percentComplete.toFixed(2)}%`);
                },
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                (error) => {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ ${modelName}:`, error);
                    reject(error);
                }
            );
        } catch (error) {
            console.error("Error in loadAndPlaceModel:", error);
            reject(error);
        }
    });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ –ë–î –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 * @param {Object} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–±—ä–µ–∫—Ç–∞
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏
 */
async function updateSessionForNewObject(container, modelName) {
    try {
        const userId = sessionStorage.getItem('userId');
        if (!userId) {
            console.error('No user ID found');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        let sessionData = null;
        const sessionResponse = await fetch(`${API_BASE_URL}/session/${userId}`);
        if (!sessionResponse.ok) {
            throw new Error('Failed to get session');
        }
        const { session } = await sessionResponse.json();
        sessionData = session || { quantities: {}, placedObjects: [] };

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ
        const objectData = {
            id: container.userData.id,
            modelName: modelName,
            coordinates: container.userData.coordinates,
            rotation: container.rotation.y.toFixed(2),
            dimensions: {
                width: container.userData.realWidth.toFixed(2),
                height: container.userData.realHeight.toFixed(2),
                depth: container.userData.realDepth.toFixed(2)
            }
        };

        sessionData.placedObjects.push(objectData);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        const saveResponse = await fetch(`${API_BASE_URL}/session`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId, sessionData }),
        });

        if (!saveResponse.ok) {
            throw new Error('Failed to save session');
        }

        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ

        console.log('Session updated successfully for new object:', objectData);
    } catch (error) {
        console.error('Error updating session:', error);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ loadAndPlaceModel
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ü–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI
 * @param {Object} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @param {boolean} isMassRemoval - –§–ª–∞–≥ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
 */
export function removeObject(container, isMassRemoval = false) {
    if (!container) return;
    
    const modelName = container.userData.modelName;
    
    // –£–±–∏—Ä–∞–µ–º optimistic update –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ refreshAllModelCounters
    // –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ –∏—Å–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ë–î
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    import('./dimensionDisplay/index.js').then(async module => {
        // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–∞–º–æ–π –º–æ–¥–µ–ª–∏
        if (typeof module.removeModelDimensions === 'function') {
            console.log('–£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏:', container.name || container.uuid);
            module.removeModelDimensions(container);
        }
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        container.traverse((child) => {
            if (child.isMesh) {
                if (child.geometry) {
                    child.geometry.dispose();
                }
                if (child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach(material => {
                            if (material.map) material.map.dispose();
                            material.dispose();
                        });
                    } else {
                        if (child.material.map) child.material.map.dispose();
                        child.material.dispose();
                    }
                }
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ü–µ–Ω—ã
        scene.remove(container);
        
        // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        const index = placedObjects.indexOf(container);
        if (index > -1) {
            placedObjects.splice(index, 1);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)
        if (!isMassRemoval && placedObjects.length > 0) {
            try {
                const { checkAllObjectsPositions } = await import('./collisionDetection.js');
                checkAllObjectsPositions();
                console.log('–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', container.userData.id);
            } catch (error) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π:', error);
            }
        }

        // 2. –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –ë–î - –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)
        if (!isMassRemoval) {
            try {
                await updateSessionForRemovedObject(container, isMassRemoval);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ë–î:', error);
            }
        } else {
            console.log('–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –æ–±—ä–µ–∫—Ç–∞', container.userData.id);
        }
    });
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 * @param {Array} containers - –ú–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏ (–¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞)
 */
export async function removeObjectsBatch(containers, modelName = null) {
    if (!containers || containers.length === 0) return;
    
    console.log(`–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ${containers.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
    
    // 1. –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å—Ü–µ–Ω—ã –∏ –º–∞—Å—Å–∏–≤–∞ –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤
    const removedObjectIds = [];
    
    for (const container of containers) {
        if (!container) continue;
        
        const objectId = container.userData.id;
        const objectModelName = container.userData.modelName || modelName;
        
        // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω)
        try {
            const dimensionModule = await import('./dimensionDisplay/index.js');
            if (typeof dimensionModule.removeModelDimensions === 'function') {
                dimensionModule.removeModelDimensions(container);
            }
        } catch (error) {
            console.warn('Dimension module not available:', error);
        }
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        container.traverse((child) => {
            if (child.isMesh) {
                if (child.geometry) child.geometry.dispose();
                if (child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach(material => {
                            if (material.map) material.map.dispose();
                            material.dispose();
                        });
                    } else {
                        if (child.material.map) child.material.map.dispose();
                        child.material.dispose();
                    }
                }
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ü–µ–Ω—ã –∏ –º–∞—Å—Å–∏–≤–∞
        scene.remove(container);
        const index = placedObjects.indexOf(container);
        if (index > -1) {
            placedObjects.splice(index, 1);
        }
        
        removedObjectIds.push(objectId);
    }
    
    // 2. –ï–¥–∏–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    try {
        await updateSessionForBatchRemoval(removedObjectIds);
        console.log(`–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${removedObjectIds.length} –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –ë–î`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î:', error);
    }
    
    // 3. –ï–¥–∏–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    try {
        const { refreshAllModelCounters } = await import('../sidebar.js');
        await refreshAllModelCounters();
        console.log('Sidebar –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ sidebar:', error);
    }

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    if (placedObjects.length > 0) {
        try {
            const { checkAllObjectsPositions } = await import('./collisionDetection.js');
            checkAllObjectsPositions();
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è');
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        }
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ –ë–î –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
 * @param {Array} objectIds - –ú–∞—Å—Å–∏–≤ ID —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
async function updateSessionForBatchRemoval(objectIds) {
    try {
        const userId = sessionStorage.getItem('userId');
        if (!userId) {
            console.error('No user ID found');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        const sessionResponse = await fetch(`${API_BASE_URL}/session/${userId}`);
        if (!sessionResponse.ok) {
            throw new Error('Failed to get session');
        }
        const { session } = await sessionResponse.json();
        const sessionData = session || { quantities: {}, placedObjects: [] };

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ placedObjects –æ–¥–Ω–∏–º –ø—Ä–æ—Ö–æ–¥–æ–º
        sessionData.placedObjects = sessionData.placedObjects.filter(obj => !objectIds.includes(obj.id));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        const saveResponse = await fetch(`${API_BASE_URL}/session`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId, sessionData }),
        });

        if (!saveResponse.ok) {
            throw new Error('Failed to save session');
        }

        console.log(`–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è ${objectIds.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
    } catch (error) {
        console.error('Error in batch session update:', error);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ –ë–î –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 * @param {Object} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–±—ä–µ–∫—Ç–∞
 * @param {boolean} isMassRemoval - –§–ª–∞–≥ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
 */
async function updateSessionForRemovedObject(container, isMassRemoval) {
    try {
        const userId = sessionStorage.getItem('userId');
        if (!userId) {
            console.error('No user ID found');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        let sessionData = null;
        try {
            const { getSessionData } = await import('../ui/dragAndDrop.js');
            sessionData = await getSessionData();
        } catch (error) {
            console.error('Error getting session data:', error);
            throw new Error('Failed to get session data');
        }

        // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ placedObjects –≤ —Å–µ—Å—Å–∏–∏
        const objectIndex = sessionData.placedObjects.findIndex(obj => obj.id === container.userData.id);
        if (objectIndex !== -1) {
            sessionData.placedObjects.splice(objectIndex, 1);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –≤ quantities —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        if (!isMassRemoval) {
            if (!sessionData.quantities) {
                sessionData.quantities = {};
            }
            const modelName = container.userData.modelName;
            const currentQuantity = sessionData.quantities[modelName] || 0;
            sessionData.quantities[modelName] = currentQuantity + 1;
            console.log(`Increased quantity for ${modelName} to ${currentQuantity + 1}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ UI —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            const placedCount = sessionData.placedObjects.filter(obj => obj.modelName === modelName).length;
            updateModelPlacementCounter(modelName, placedCount);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        const saveResponse = await fetch(`${API_BASE_URL}/session`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId, sessionData }),
        });

        if (!saveResponse.ok) {
            throw new Error('Failed to save session');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ sidebar –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
        if (!isMassRemoval) {
            try {
                const { refreshAllModelCounters } = await import('../sidebar.js');
                await refreshAllModelCounters();
            } catch (error) {
                console.error('Error updating sidebar counters after removal:', error);
            }
        } else {
            console.log('–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ sidebar –¥–ª—è –æ–±—ä–µ–∫—Ç–∞', container.userData.id);
        }

        console.log('Session updated successfully after removing object:', container.userData.id);
    } catch (error) {
        console.error('Error updating session after object removal:', error);
    }
}