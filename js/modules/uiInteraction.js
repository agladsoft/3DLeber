/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
import { ELEMENT_INFO } from '../config.js';
import { scene } from '../scene.js';
import { placedObjects, removeObject } from './objectManager.js';
import { checkAllObjectsPositions } from './collisionDetection.js';

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –≤ UI (—Ç–∞–±–ª–∏—Ü—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
 * @param {Object} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥–µ–ª–∏
 * @param {String} modelName - –ò–º—è —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
 */
export function addObjectToUI(container, modelName) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
    const elementInfo = ELEMENT_INFO[modelName] || modelName;

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ currentSize —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (!container.userData.currentSize && container.userData.originalSize) {
        container.userData.currentSize = container.userData.originalSize;
    } else if (!container.userData.currentSize) {
        container.userData.currentSize = 1; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    }
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–æ–¥–µ–ª–∏
    let sizeDisplay = container.userData.currentSize.toFixed(1) + '–º';
    
    // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –±—ã–ª–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –º–µ—Ç—Ä—ã
    if (container.userData.wasConverted && container.userData.displayWidth) {
        const width = (container.userData.displayWidth / 1000).toFixed(2);
        const height = (container.userData.displayHeight / 1000).toFixed(2);
        const depth = (container.userData.displayDepth / 1000).toFixed(2);
        sizeDisplay = `${width}√ó${height}√ó${depth}–º`;
    }
    // –ò–Ω–∞—á–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    else if (container.userData.realWidth && container.userData.realHeight && container.userData.realDepth) {
        const width = (container.userData.realWidth * container.scale.x).toFixed(2);
        const height = (container.userData.realHeight * container.scale.y).toFixed(2);
        const depth = (container.userData.realDepth * container.scale.z).toFixed(2);
        sizeDisplay = `${width}√ó${height}√ó${depth}–º`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
    const tableBody = document.querySelector("#elementsTable tbody");
    const row = document.createElement("tr");
    row.innerHTML = `<td>${elementInfo}</td>
                     <td class="size-cell">
                        <span class="model-size" title="–†–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏ (–®√ó–í√ó–ì)">${sizeDisplay}</span>
                     </td>
                     <td><button class="delete-button" style="cursor:pointer;">üóëÔ∏è</button></td>`;
    tableBody.appendChild(row);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Å—Ç—Ä–æ–∫–µ
    row.container = container;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    row.querySelector(".delete-button").addEventListener("click", () => {
        if (row.container) {
            // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ü–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            removeObject(row.container);
        }
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        row.remove();
        
        // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
        checkAllObjectsPositions();
    });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –≤ UI
 * @param {Object} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥–µ–ª–∏
 */
export function updateSizeInUI(container) {
    if (!container) return;
    
    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const tableRows = document.querySelectorAll("#elementsTable tbody tr");
    for (let row of tableRows) {
        if (row.container === container) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ —è—á–µ–π–∫–µ —Å –∫–ª–∞—Å—Å–æ–º 'model-size', –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const sizeCell = row.querySelector('.model-size');
            if (sizeCell) {
                // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –±—ã–ª–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –º–µ—Ç—Ä—ã
                if (container.userData.wasConverted && container.userData.displayWidth) {
                    const widthMm = container.userData.displayWidth.toFixed(2);
                    const heightMm = container.userData.displayHeight.toFixed(2);
                    const depthMm = container.userData.displayDepth.toFixed(2);
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (1000–º–º = 1–º)
                    const width = (container.userData.displayWidth / 1000).toFixed(2);
                    const height = (container.userData.displayHeight / 1000).toFixed(2);
                    const depth = (container.userData.displayDepth / 1000).toFixed(2);
                    
                    sizeCell.textContent = `${width}√ó${height}√ó${depth}–º`;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º title —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                    sizeCell.title = `–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${widthMm}√ó${heightMm}√ó${depthMm}–º–º (${width}√ó${height}√ó${depth}–º)`;
                }
                // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏ (—à–∏—Ä–∏–Ω–∞ √ó –≤—ã—Å–æ—Ç–∞ √ó –≥–ª—É–±–∏–Ω–∞)
                else if (container.userData.realWidth && container.userData.realHeight && container.userData.realDepth) {
                    const width = (container.userData.realWidth * container.scale.x).toFixed(2);
                    const height = (container.userData.realHeight * container.scale.y).toFixed(2);
                    const depth = (container.userData.realDepth * container.scale.z).toFixed(2);
                    sizeCell.textContent = `${width}√ó${height}√ó${depth}–º`;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º title —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                    sizeCell.title = `–®–∏—Ä–∏–Ω–∞: ${width}–º, –í—ã—Å–æ—Ç–∞: ${height}–º, –ì–ª—É–±–∏–Ω–∞: ${depth}–º`;
                } else {
                    // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä
                    sizeCell.textContent = container.userData.currentSize.toFixed(1) + '–º';
                }
            }
            break;
        }
    }
}
