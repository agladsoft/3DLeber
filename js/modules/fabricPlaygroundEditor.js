/**
 * –†–µ–¥–∞–∫—Ç–æ—Ä –ø–ª–æ—â–∞–¥–æ–∫ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Fabric.js
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–æ—â–∞–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã
 */

class FabricPlaygroundEditor {
    constructor() {
        this.canvas = null;
        this.currentTool = 'polygon';
        this.currentColor = '#D9D9D9';
        this.currentTexture = 'rubber';
        this.isDrawingMode = false;
        this.polygonPoints = [];
        this.isDrawingPolygon = false;
        this.history = [];
        this.historyStep = 0;
        this.scale = 0.1; // –º–µ—Ç—Ä–æ–≤ –Ω–∞ –ø–∏–∫—Å–µ–ª—å (–±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è 100x100–º)
        this.wasDrawingMode = false; // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        
        this.init();
    }

    init() {
        this.setupCanvas();
        this.setupEventListeners();
        this.setupGrid();
        this.updateStats();
        
        console.log('üé® Fabric.js Playground Editor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üìê –ú–∞—Å—à—Ç–∞–±:', this.scale, '–º/–ø–∏–∫—Å–µ–ª—å');
    }

    setupCanvas() {
        // –°–æ–∑–¥–∞–µ–º Fabric.js canvas –¥–ª—è –ø–ª–æ—â–∞–¥–∫–∏ 100x100 –º–µ—Ç—Ä–æ–≤
        this.canvas = new fabric.Canvas('playgroundCanvas', {
            width: 1000,  // 100 –º–µ—Ç—Ä–æ–≤ = 1000 –ø–∏–∫—Å–µ–ª–µ–π (1–º = 10 –ø–∏–∫—Å–µ–ª–µ–π)
            height: 1000, // 100 –º–µ—Ç—Ä–æ–≤ = 1000 –ø–∏–∫—Å–µ–ª–µ–π (1–º = 10 –ø–∏–∫—Å–µ–ª–µ–π)
            backgroundColor: '#f8f9fa',
            selection: true,
            preserveObjectStacking: true
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–±: 1 –º–µ—Ç—Ä = 10 –ø–∏–∫—Å–µ–ª–µ–π
        this.scale = 0.1; // 1 –ø–∏–∫—Å–µ–ª—å = 0.1 –º–µ—Ç—Ä–∞

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ canvas
        this.canvas.on('path:created', (e) => this.onPathCreated(e));
        this.canvas.on('object:added', () => this.updateStats());
        this.canvas.on('object:removed', () => this.updateStats());
        this.canvas.on('object:modified', () => this.updateStats());
        this.canvas.on('selection:created', (e) => this.onObjectSelected(e));
        this.canvas.on('selection:updated', (e) => this.onObjectSelected(e));
        this.canvas.on('selection:cleared', () => this.onSelectionCleared());

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —É–±—Ä–∞–Ω—ã - —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –æ–±—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        this.canvas.on('object:moving', () => this.disableDrawingTemporarily());
        this.canvas.on('object:scaling', () => this.disableDrawingTemporarily());
        this.canvas.on('object:rotating', () => this.disableDrawingTemporarily());
        this.canvas.on('mouse:up', () => this.restoreDrawingMode());
        
        // –£–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º–æ–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏
        this.canvas.on('mouse:move', (e) => this.onMouseMove(e));
        
        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –º—ã—à–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.canvas.on('mouse:down', (e) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è, –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫
            this.checkDrawingMode(e);
            this.onMouseDown(e);
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveState();
    }

    setupGrid() {
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 1 –º–µ—Ç—Ä = 10 –ø–∏–∫—Å–µ–ª–µ–π
        const gridSize = 10; // –ø–∏–∫—Å–µ–ª–µ–π (1 –º–µ—Ç—Ä)
        const gridColor = '#e0e0e0';
        
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for (let i = 0; i <= this.canvas.width; i += gridSize) {
            const line = new fabric.Line([i, 0, i, this.canvas.height], {
                stroke: gridColor,
                strokeWidth: 1,
                selectable: false,
                evented: false,
                opacity: 0.5,
                isGrid: true
            });
            this.canvas.add(line);
        }
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for (let i = 0; i <= this.canvas.height; i += gridSize) {
            const line = new fabric.Line([0, i, this.canvas.width, i], {
                stroke: gridColor,
                strokeWidth: 1,
                selectable: false,
                evented: false,
                opacity: 0.5,
                isGrid: true
            });
            this.canvas.add(line);
        }

        // –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        this.addAxisLabels(gridSize);
        
        this.canvas.renderAll();
    }

    addAxisLabels(gridSize) {
        const scale = this.scale;
        const fontSize = 10;
        const labelColor = '#666';
        const majorGridStep = gridSize * 10; // –ü–æ–¥–ø–∏—Å–∏ –∫–∞–∂–¥—ã–µ 10 –º–µ—Ç—Ä–æ–≤

        // –ü–æ–¥–ø–∏—Å–∏ –ø–æ –æ—Å–∏ X (–º–µ—Ç—Ä—ã) - –∫–∞–∂–¥—ã–µ 10 –º–µ—Ç—Ä–æ–≤
        for (let i = majorGridStep; i <= this.canvas.width; i += majorGridStep) {
            const meters = Math.round(i * scale);
            const text = new fabric.Text(`${meters}–º`, {
                left: i,
                top: 5,
                fontSize: fontSize,
                fill: labelColor,
                selectable: false,
                evented: false,
                originX: 'center',
                isGrid: true
            });
            this.canvas.add(text);
        }

        // –ü–æ–¥–ø–∏—Å–∏ –ø–æ –æ—Å–∏ Y (–º–µ—Ç—Ä—ã) - –∫–∞–∂–¥—ã–µ 10 –º–µ—Ç—Ä–æ–≤
        for (let i = majorGridStep; i <= this.canvas.height; i += majorGridStep) {
            const meters = Math.round(i * scale);
            const text = new fabric.Text(`${meters}–º`, {
                left: 5,
                top: i,
                fontSize: fontSize,
                fill: labelColor,
                selectable: false,
                evented: false,
                originY: 'center',
                isGrid: true
            });
            this.canvas.add(text);
        }
    }

    setupEventListeners() {
        // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        document.querySelectorAll('.tool-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.tool-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                this.setTool(btn.dataset.tool);
            });
        });

        // –¶–≤–µ—Ç–∞
        document.querySelectorAll('.color-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.color-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                this.currentColor = btn.dataset.color;
                this.updateSelectedObjectsColor();
            });
        });

        // –¢–µ–∫—Å—Ç—É—Ä—ã
        document.querySelectorAll('.texture-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.texture-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                this.currentTexture = btn.dataset.texture;
                this.updateSelectedObjectsTexture();
            });
        });

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        this.setupParameterControls();

        // –î–µ–π—Å—Ç–≤–∏—è
        document.getElementById('clearCanvas').addEventListener('click', () => this.clearCanvas());
        document.getElementById('undoAction').addEventListener('click', () => this.undo());
        document.getElementById('exportJSON').addEventListener('click', () => this.exportJSON());
        document.getElementById('importJSON').addEventListener('click', () => this.importJSON());
        document.getElementById('exportImage').addEventListener('click', () => this.exportImage());

        // –ö–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => this.onKeyDown(e));
    }

    setupParameterControls() {
        const strokeWidthInput = document.getElementById('strokeWidth');
        const strokeWidthValue = document.getElementById('strokeWidthValue');
        const opacityInput = document.getElementById('opacity');
        const opacityValue = document.getElementById('opacityValue');
        const scaleInput = document.getElementById('scale');

        strokeWidthInput.addEventListener('input', (e) => {
            strokeWidthValue.textContent = e.target.value + 'px';
            this.updateSelectedObjectsStroke();
        });

        opacityInput.addEventListener('input', (e) => {
            const value = Math.round(e.target.value * 100);
            opacityValue.textContent = value + '%';
            this.updateSelectedObjectsOpacity();
        });

        scaleInput.addEventListener('change', (e) => {
            this.scale = parseFloat(e.target.value);
            this.updateStats();
        });
    }

    setTool(tool) {
        this.currentTool = tool;
        this.exitCurrentMode();

        const statusEl = document.getElementById('drawingStatus');
        
        switch (tool) {
            case 'select':
                this.canvas.isDrawingMode = false;
                this.canvas.selection = true;
                statusEl.innerHTML = '<p>–†–µ–∂–∏–º: –í—ã–±–æ—Ä –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤</p>';
                statusEl.classList.add('active');
                break;
                
            case 'freehand':
                this.canvas.isDrawingMode = true;
                this.canvas.selection = true; // –í–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
                this.canvas.freeDrawingBrush.width = parseInt(document.getElementById('strokeWidth').value);
                this.canvas.freeDrawingBrush.color = this.currentColor;
                statusEl.innerHTML = '<p>–†–µ–∂–∏–º: –†–∏—Å–æ–≤–∞–Ω–∏–µ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–º–µ—â–∞—Ç—å)</p>';
                statusEl.classList.add('active');
                break;
                
            case 'polygon':
                this.canvas.isDrawingMode = false;
                this.canvas.selection = true; // –í–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
                this.isDrawingPolygon = true;
                this.polygonPoints = [];
                statusEl.innerHTML = '<p>–†–µ–∂–∏–º: –ú–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–º–µ—â–∞—Ç—å)</p>';
                statusEl.classList.add('active');
                break;
                
            case 'rectangle':
            case 'circle':
                this.canvas.isDrawingMode = false;
                statusEl.innerHTML = `<p>–†–µ–∂–∏–º: –°–æ–∑–¥–∞–Ω–∏–µ ${tool === 'rectangle' ? '–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞' : '–∫—Ä—É–≥–∞'}</p>`;
                statusEl.classList.add('active');
                break;
                
            default:
                this.canvas.isDrawingMode = false;
                statusEl.innerHTML = '<p>–†–µ–∂–∏–º: –í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤</p>';
                statusEl.classList.remove('active');
        }
    }

    exitCurrentMode() {
        this.canvas.isDrawingMode = false;
        this.isDrawingPolygon = false;
        this.polygonPoints = [];
        this.removeTemporaryObjects();
    }

    onMouseDown(e) {
        if (!e.e) return;

        const pointer = this.canvas.getPointer(e.e);

        switch (this.currentTool) {
            case 'polygon':
                this.addPolygonPoint(pointer);
                break;
                
            case 'rectangle':
                this.startRectangleDrawing(pointer);
                break;
                
            case 'circle':
                this.startCircleDrawing(pointer);
                break;
        }
    }

    addPolygonPoint(pointer) {
        if (!this.isDrawingPolygon) return;

        this.polygonPoints.push(pointer);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        const circle = new fabric.Circle({
            left: pointer.x,
            top: pointer.y,
            radius: 3,
            fill: '#ff0000',
            originX: 'center',
            originY: 'center',
            selectable: false,
            evented: false,
            isTemporary: true
        });
        this.canvas.add(circle);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–æ—á–∫–∞, —Ä–∏—Å—É–µ–º –ª–∏–Ω–∏—é
        if (this.polygonPoints.length > 1) {
            const prevPoint = this.polygonPoints[this.polygonPoints.length - 2];
            const line = new fabric.Line([prevPoint.x, prevPoint.y, pointer.x, pointer.y], {
                stroke: '#ff0000',
                strokeWidth: 2,
                selectable: false,
                evented: false,
                isTemporary: true
            });
            this.canvas.add(line);
        }

        this.canvas.renderAll();
    }

    finishPolygon() {
        if (this.polygonPoints.length < 3) {
            alert('–ú–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏');
            return;
        }

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        this.removeTemporaryObjects();

        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫
        const polygon = new fabric.Polygon(this.polygonPoints, {
            fill: this.currentColor,
            stroke: '#333',
            strokeWidth: parseInt(document.getElementById('strokeWidth').value),
            opacity: parseFloat(document.getElementById('opacity').value),
            objectType: 'playground',
            selectable: true,      // –ú–æ–∂–Ω–æ –≤—ã–¥–µ–ª—è—Ç—å
            moveable: true,        // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
            rotatable: true,       // –ú–æ–∂–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å
            scalable: true,        // –ú–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å
            hasRotatingPoint: true, // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ—á–∫—É –ø–æ–≤–æ—Ä–æ—Ç–∞
            lockUniScaling: false   // –†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
        this.applyTexture(polygon);

        this.canvas.add(polygon);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–µ–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
        setTimeout(() => {
            this.canvas.setActiveObject(polygon);
            this.canvas.renderAll();
        }, 100);
        
        this.saveState();

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        this.polygonPoints = [];
        this.isDrawingPolygon = false;
    }

    startRectangleDrawing(pointer) {
        const rect = new fabric.Rect({
            left: pointer.x,
            top: pointer.y,
            width: 100,
            height: 80,
            fill: this.currentColor,
            stroke: '#333',
            strokeWidth: parseInt(document.getElementById('strokeWidth').value),
            opacity: parseFloat(document.getElementById('opacity').value),
            objectType: 'playground',
            selectable: true,      // –ú–æ–∂–Ω–æ –≤—ã–¥–µ–ª—è—Ç—å
            moveable: true,        // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
            rotatable: true,       // –ú–æ–∂–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å
            scalable: true,        // –ú–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å
            hasRotatingPoint: true, // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ—á–∫—É –ø–æ–≤–æ—Ä–æ—Ç–∞
            lockUniScaling: false   // –†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        });

        this.applyTexture(rect);
        this.canvas.add(rect);
        this.canvas.setActiveObject(rect);
        this.saveState();
    }

    startCircleDrawing(pointer) {
        const circle = new fabric.Circle({
            left: pointer.x,
            top: pointer.y,
            radius: 50,
            fill: this.currentColor,
            stroke: '#333',
            strokeWidth: parseInt(document.getElementById('strokeWidth').value),
            opacity: parseFloat(document.getElementById('opacity').value),
            objectType: 'playground',
            selectable: true,      // –ú–æ–∂–Ω–æ –≤—ã–¥–µ–ª—è—Ç—å
            moveable: true,        // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
            rotatable: true,       // –ú–æ–∂–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å
            scalable: true,        // –ú–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å
            hasRotatingPoint: true, // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ—á–∫—É –ø–æ–≤–æ—Ä–æ—Ç–∞
            lockUniScaling: false   // –†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        });

        this.applyTexture(circle);
        this.canvas.add(circle);
        this.canvas.setActiveObject(circle);
        this.saveState();
    }

    applyTexture(object) {
        if (this.currentTexture === 'rubber') {
            // –†–µ–∑–∏–Ω–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º pattern
            const patternCanvas = document.createElement('canvas');
            patternCanvas.width = 20;
            patternCanvas.height = 20;
            const ctx = patternCanvas.getContext('2d');
            
            ctx.fillStyle = this.currentColor;
            ctx.fillRect(0, 0, 20, 20);
            
            ctx.fillStyle = 'rgba(0,0,0,0.1)';
            ctx.beginPath();
            ctx.arc(5, 5, 1, 0, Math.PI * 2);
            ctx.arc(15, 5, 1, 0, Math.PI * 2);
            ctx.arc(10, 10, 1, 0, Math.PI * 2);
            ctx.arc(5, 15, 1, 0, Math.PI * 2);
            ctx.arc(15, 15, 1, 0, Math.PI * 2);
            ctx.fill();
            
            const pattern = new fabric.Pattern({
                source: patternCanvas,
                repeat: 'repeat'
            });
            
            object.set('fill', pattern);
        }
    }

    removeTemporaryObjects() {
        const objects = this.canvas.getObjects().filter(obj => obj.isTemporary);
        objects.forEach(obj => this.canvas.remove(obj));
        this.canvas.renderAll();
    }

    onPathCreated(e) {
        const path = e.path;
        path.set({
            fill: this.currentColor,
            opacity: parseFloat(document.getElementById('opacity').value),
            objectType: 'playground',
            selectable: true,      // –ú–æ–∂–Ω–æ –≤—ã–¥–µ–ª—è—Ç—å
            moveable: true,        // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
            rotatable: true,       // –ú–æ–∂–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å
            scalable: true,        // –ú–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å
            hasRotatingPoint: true, // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ—á–∫—É –ø–æ–≤–æ—Ä–æ—Ç–∞
            lockUniScaling: false   // –†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        });
        
        this.applyTexture(path);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–µ–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
        setTimeout(() => {
            this.canvas.setActiveObject(path);
            this.canvas.renderAll();
        }, 100);
        
        this.saveState();
    }

    onObjectSelected(e) {
        const obj = e.selected ? e.selected[0] : e.target;
        if (obj && obj.objectType === 'playground') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            console.log('–í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç –ø–ª–æ—â–∞–¥–∫–∏:', obj);
            
            // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
            this.disableDrawingTemporarily();
        }
    }

    onSelectionCleared() {
        // –û–±—ä–µ–∫—Ç —Å–Ω—è—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏—è - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (this.currentTool === 'freehand') {
            this.canvas.isDrawingMode = true;
        }
    }

    disableDrawingTemporarily() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ
        if (this.canvas.isDrawingMode) {
            this.wasDrawingMode = true;
            this.canvas.isDrawingMode = false;
        }
    }

    restoreDrawingMode() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
        if (this.wasDrawingMode && this.currentTool === 'freehand') {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            setTimeout(() => {
                if (!this.canvas.getActiveObject()) {
                    this.canvas.isDrawingMode = true;
                }
                this.wasDrawingMode = false;
            }, 50);
        }
    }


    checkDrawingMode(e) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        if (!e.e) return;
        
        const objectUnderCursor = this.canvas.findTarget(e.e, false);
        const isPlaygroundObject = objectUnderCursor && objectUnderCursor.objectType === 'playground';
        
        // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        if (this.currentTool === 'freehand') {
            // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (–Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –∏–ª–∏ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–µ—Ç–∫–∏)
            if (!isPlaygroundObject && !this.canvas.getActiveObject()) {
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
                this.canvas.isDrawingMode = true;
                this.wasDrawingMode = false;
            }
            // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –ø–ª–æ—â–∞–¥–∫–∏, –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
            else if (isPlaygroundObject && this.canvas.isDrawingMode) {
                this.canvas.isDrawingMode = false;
                this.wasDrawingMode = true;
            }
        }
    }

    onMouseMove(e) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏
        this.checkDrawingMode(e);
    }

    updateSelectedObjectsColor() {
        const activeObjects = this.canvas.getActiveObjects();
        activeObjects.forEach(obj => {
            if (obj.objectType === 'playground') {
                obj.set('fill', this.currentColor);
                this.applyTexture(obj);
            }
        });
        this.canvas.renderAll();
        this.saveState();
    }

    updateSelectedObjectsTexture() {
        const activeObjects = this.canvas.getActiveObjects();
        activeObjects.forEach(obj => {
            if (obj.objectType === 'playground') {
                this.applyTexture(obj);
            }
        });
        this.canvas.renderAll();
        this.saveState();
    }

    updateSelectedObjectsStroke() {
        const strokeWidth = parseInt(document.getElementById('strokeWidth').value);
        const activeObjects = this.canvas.getActiveObjects();
        activeObjects.forEach(obj => {
            if (obj.objectType === 'playground') {
                obj.set('strokeWidth', strokeWidth);
            }
        });
        this.canvas.renderAll();
        this.saveState();
    }

    updateSelectedObjectsOpacity() {
        const opacity = parseFloat(document.getElementById('opacity').value);
        const activeObjects = this.canvas.getActiveObjects();
        activeObjects.forEach(obj => {
            if (obj.objectType === 'playground') {
                obj.set('opacity', opacity);
            }
        });
        this.canvas.renderAll();
        this.saveState();
    }

    onKeyDown(e) {
        switch (e.key) {
            case 'Enter':
                if (this.isDrawingPolygon) {
                    this.finishPolygon();
                }
                break;
                
            case 'Escape':
                this.exitCurrentMode();
                this.setTool('select');
                break;
                
            case 'Delete':
            case 'Backspace':
                this.deleteSelected();
                e.preventDefault();
                break;
                
            case 'z':
                if (e.ctrlKey || e.metaKey) {
                    this.undo();
                    e.preventDefault();
                }
                break;
        }
    }

    deleteSelected() {
        const activeObjects = this.canvas.getActiveObjects();
        activeObjects.forEach(obj => {
            if (obj.objectType === 'playground') {
                this.canvas.remove(obj);
            }
        });
        this.canvas.discardActiveObject();
        this.saveState();
    }

    clearCanvas() {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–ª–æ—â–∞–¥–∫–∏?')) {
            const objects = this.canvas.getObjects().filter(obj => obj.objectType === 'playground');
            objects.forEach(obj => this.canvas.remove(obj));
            this.saveState();
        }
    }

    undo() {
        if (this.historyStep > 0) {
            this.historyStep--;
            this.canvas.loadFromJSON(this.history[this.historyStep], () => {
                this.canvas.renderAll();
                this.updateStats();
            });
        }
    }

    saveState() {
        const json = JSON.stringify(this.canvas.toJSON(['objectType']));
        this.history = this.history.slice(0, this.historyStep + 1);
        this.history.push(json);
        this.historyStep++;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if (this.history.length > 20) {
            this.history.shift();
            this.historyStep--;
        }
    }

    updateStats() {
        const playgroundObjects = this.canvas.getObjects().filter(obj => obj.objectType === 'playground');
        const objectCount = playgroundObjects.length;
        
        let totalArea = 0;
        playgroundObjects.forEach(obj => {
            if (obj.type === 'polygon') {
                totalArea += this.calculatePolygonArea(obj);
            } else if (obj.type === 'rect') {
                totalArea += (obj.width * obj.scaleX) * (obj.height * obj.scaleY) * this.scale * this.scale;
            } else if (obj.type === 'circle') {
                const radius = obj.radius * obj.scaleX * this.scale;
                totalArea += Math.PI * radius * radius;
            }
        });

        document.getElementById('objectCount').textContent = objectCount;
        document.getElementById('totalArea').textContent = Math.round(totalArea);
    }

    calculatePolygonArea(polygon) {
        const points = polygon.points;
        let area = 0;
        
        for (let i = 0; i < points.length; i++) {
            const j = (i + 1) % points.length;
            area += points[i].x * points[j].y;
            area -= points[j].x * points[i].y;
        }
        
        area = Math.abs(area) / 2;
        return area * this.scale * this.scale;
    }

    exportJSON() {
        const playgroundObjects = this.canvas.getObjects().filter(obj => obj.objectType === 'playground');
        const data = {
            version: '1.0',
            timestamp: new Date().toISOString(),
            scale: this.scale,
            objects: playgroundObjects.map(obj => obj.toObject(['objectType']))
        };
        
        const dataStr = JSON.stringify(data, null, 2);
        const dataBlob = new Blob([dataStr], {type: 'application/json'});
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `playground_${new Date().toISOString().split('T')[0]}.json`;
        link.click();
    }

    importJSON() {
        document.getElementById('importFile').click();
        
        document.getElementById('importFile').onchange = (e) => {
            const file = e.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = (event) => {
                try {
                    const data = JSON.parse(event.target.result);
                    
                    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—ä–µ–∫—Ç—ã –ø–ª–æ—â–∞–¥–∫–∏
                    const objects = this.canvas.getObjects().filter(obj => obj.objectType === 'playground');
                    objects.forEach(obj => this.canvas.remove(obj));
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
                    data.objects.forEach(objData => {
                        fabric.util.enlivenObjects([objData], (objects) => {
                            objects.forEach(obj => {
                                this.canvas.add(obj);
                            });
                            this.canvas.renderAll();
                            this.saveState();
                        });
                    });
                    
                    if (data.scale) {
                        this.scale = data.scale;
                        document.getElementById('scale').value = data.scale;
                    }
                    
                } catch (error) {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ' + error.message);
                }
            };
            reader.readAsText(file);
        };
    }

    exportImage() {
        const dataURL = this.canvas.toDataURL({
            format: 'png',
            quality: 1.0,
            multiplier: 2
        });
        
        const link = document.createElement('a');
        link.href = dataURL;
        link.download = `playground_${new Date().toISOString().split('T')[0]}.png`;
        link.click();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.editor = new FabricPlaygroundEditor();
    window.canvas = window.editor.canvas;
    console.log('Editor and canvas set as global variables');
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.FabricPlaygroundEditor = FabricPlaygroundEditor;