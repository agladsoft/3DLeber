// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫
export const categories = [
    {
        id: 'houses',
        name: '–î–æ–º–∏–∫–∏',
        icon: 'üè†',
        active: false,
        expanded: false, // –ù–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
        modelPrefixes: ['–õ–ì–î-']
    },
    {
        id: 'swings',
        name: '–ö–∞—á–∞–ª–∫–∏',
        icon: 'üé†',
        active: false,
        expanded: false,
        modelPrefixes: ['–õ–ì–ö-', '–õ–ì–ö–†-']
    },
    {
        id: 'complexes',
        name: '–ö–æ–º–ø–ª–µ–∫—Å—ã',
        icon: 'üèóÔ∏è',
        active: false,
        expanded: false,
        modelPrefixes: ['–õ–ì–ò–ö-', '–õ–ì–ò-']
    },
    {
        id: 'gazebos',
        name: '–ë–µ—Å–µ–¥–∫–∏',
        icon: 'üõñ',
        active: false,
        expanded: false,
        modelPrefixes: ['–õ–ì–ë-', '–õ–ì–ë–ï-']
    },
    {
        id: 'sportComplexes',
        name: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã',
        icon: 'üèãÔ∏è',
        active: false,
        expanded: false,
        modelPrefixes: ['–õ–ì–°–ö-', '–õ–ì–°–ü-']
    }
];
// –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
export function renderCategories(container, onCategoryClick, models) {
    if (!container) {
        console.error("Container for categories not found");
        return;
    }
    
    container.innerHTML = '';
    
    categories.forEach(category => {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryContainer = document.createElement('div');
        categoryContainer.className = `category-container ${category.expanded ? 'open' : ''}`;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryElement = document.createElement('div');
        categoryElement.className = `category-item ${category.active ? 'active' : ''}`;
        categoryElement.setAttribute('data-category', category.id);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categoryElement.innerHTML = `
            <span class="category-name">${category.name}</span>
            <span class="category-arrow">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 18L15 12L9 6" stroke="#F05323" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </span>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const itemsList = document.createElement('div');
        itemsList.className = 'category-items-list';
        itemsList.id = `${category.id}-items`;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const filteredModels = models ? filterModelsByCategory(models, category) : [];
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–µ–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
        if (filteredModels.length > 0) {
            filteredModels.forEach(model => {
                const modelElement = document.createElement('div');
                modelElement.className = 'subcategory-item';
                modelElement.textContent = model.name || model.id;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
                modelElement.addEventListener('click', (event) => {
                    event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    const activeItem = container.querySelector('.subcategory-item.active');
                    if (activeItem) activeItem.classList.remove('active');
                    modelElement.classList.add('active');
                    
                    // –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
                    if (onCategoryClick) {
                        // –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (–≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞)
                        onCategoryClick(model, 'select-item');
                    }
                });
                
                itemsList.appendChild(modelElement);
            });
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            const emptyElement = document.createElement('div');
            emptyElement.className = 'subcategory-item empty';
            emptyElement.textContent = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤';
            itemsList.appendChild(emptyElement);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        categoryElement.addEventListener('click', (event) => {
            event.stopPropagation();
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏
            category.expanded = !category.expanded;
            categoryContainer.classList.toggle('open', category.expanded);
            
            // –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (onCategoryClick) {
                // –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
                onCategoryClick(category, 'toggle-category');
            }
        });
        
        // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        categoryContainer.appendChild(categoryElement);
        categoryContainer.appendChild(itemsList);
        container.appendChild(categoryContainer);
    });
}

// –§–∏–ª—å—Ç—Ä –º–æ–¥–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export function filterModelsByCategory(models, category) {
    if (!models || !category) return [];
    
    return models.filter(model => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –º–æ–¥–µ–ª–∏
        if (category.modelPrefixes && category.modelPrefixes.length > 0) {
            return category.modelPrefixes.some(prefix => 
                model.id && model.id.startsWith(prefix)
            );
        }
        return false;
    });
}

// –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥–µ–ª–∏ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
export function getModelCategory(modelId) {
    if (!modelId) return null;
    
    for (const category of categories) {
        if (category.modelPrefixes && category.modelPrefixes.some(prefix => modelId.startsWith(prefix))) {
            return category;
        }
    }
    
    return null;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export { categories };
