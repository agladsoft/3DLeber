/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã, —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Three.js
 */
import { 
    RENDERER_SETTINGS, 
    LIGHTING 
} from '../config.js';
import * as THREE from 'three';
import { PMREMGenerator } from 'three';
import { EXRLoader } from 'three/examples/jsm/loaders/EXRLoader.js';
// CubeTextureLoader —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ –∏–º–ø–æ—Ä—Ç THREE

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
export let canvas;
export let renderer;
export let scene;

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ - canvas –∏ renderer
 */
export function initializeRenderer() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas
    canvas = document.getElementById("renderCanvas");
    
    // –°–æ–∑–¥–∞–µ–º WebGL —Ä–µ–Ω–¥–µ—Ä–µ—Ä
    renderer = new THREE.WebGLRenderer({ 
        canvas: canvas,
        antialias: RENDERER_SETTINGS.antialias,
        alpha: true
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ renderer
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(RENDERER_SETTINGS.pixelRatio);
    renderer.setClearColor(RENDERER_SETTINGS.clearColor);
    renderer.shadowMap.enabled = RENDERER_SETTINGS.shadowMapEnabled;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap; // –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏

    // –£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –±—É—Ñ–µ—Ä–∞ –≥–ª—É–±–∏–Ω—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è Z-fighting
    renderer.logarithmicDepthBuffer = true; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –≥–ª—É–±–∏–Ω—ã
    
    // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PBR –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    renderer.outputColorSpace = THREE.SRGBColorSpace; // –ù–æ–≤—ã–π API –≤–º–µ—Å—Ç–æ outputEncoding
    renderer.toneMapping = THREE.ACESFilmicToneMapping; // –£–ª—É—á—à–µ–Ω–Ω—ã–π tone mapping
    renderer.toneMappingExposure = 0.5; // –£–≤–µ–ª–∏—á–µ–Ω–∞ —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ —Å–≤–µ—Ç–ª—ã—Ö –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    
    console.log('–†–µ–Ω–¥–µ—Ä–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PBR –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
    
    return renderer;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Three.js —Å—Ü–µ–Ω—É
 */
export function createScene() {
    // –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É
    scene = new THREE.Scene();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è
    createLighting();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ HDRI-—Ñ–æ–Ω–∞
    createEXRBackground();
    
    return scene;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è –¥–ª—è —Å—Ü–µ–Ω—ã
 */
function createLighting() {
    // –°–æ–∑–¥–∞–µ–º –æ–±—â–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ (–∞–Ω–∞–ª–æ–≥ HemisphericLight)
    const ambientLight = new THREE.AmbientLight(
        LIGHTING.ambientLight.color,
        LIGHTING.ambientLight.intensity
    );
    scene.add(ambientLight);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–≤–µ—Ç (–¥–ª—è —Ç–µ–Ω–µ–π)
    const directionalLight = new THREE.DirectionalLight(
        LIGHTING.directionalLight.color,
        LIGHTING.directionalLight.intensity
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–≤–µ—Ç–∞
    directionalLight.position.set(
        LIGHTING.directionalLight.position.x,
        LIGHTING.directionalLight.position.y,
        LIGHTING.directionalLight.position.z
    );
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–Ω–µ–π
    if (LIGHTING.directionalLight.castShadow) {
        directionalLight.castShadow = true;
        directionalLight.shadow.mapSize.width = 2048;
        directionalLight.shadow.mapSize.height = 2048;
        directionalLight.shadow.camera.near = 0.5;
        directionalLight.shadow.camera.far = 500;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–Ω–µ–π
        const d = 50;
        directionalLight.shadow.camera.left = -d;
        directionalLight.shadow.camera.right = d;
        directionalLight.shadow.camera.top = d;
        directionalLight.shadow.camera.bottom = -d;
        
        // –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–Ω–µ–π –¥–ª—è —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        directionalLight.shadow.bias = -0.0001;
        directionalLight.shadow.normalBias = 0.02;
    }
    
    scene.add(directionalLight);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω—è—é—â–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è PBR –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const fillLight = new THREE.DirectionalLight(0xffffff, 0.4);
    fillLight.position.set(-30, 20, -30);
    scene.add(fillLight);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–µ—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç—Ä–∞–∂–µ–Ω–∏–π
    const pointLight = new THREE.PointLight(0xffffff, 0.5, 100);
    pointLight.position.set(20, 30, 20);
    scene.add(pointLight);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ø–ª–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const warmLight = new THREE.DirectionalLight(0xffd4a3, 0.6); // –¢–µ–ø–ª—ã–π –∂–µ–ª—Ç–æ–≤–∞—Ç—ã–π —Å–≤–µ—Ç
    warmLight.position.set(-40, 25, 30);
    scene.add(warmLight);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º—è–≥–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ —Å–Ω–∏–∑—É –¥–ª—è –æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è —Ç–µ–Ω–µ–π
    const bottomLight = new THREE.DirectionalLight(0xffffff, 0.3);
    bottomLight.position.set(0, -20, 0); // –°–≤–µ—Ç —Å–Ω–∏–∑—É
    scene.add(bottomLight);
    
    console.log('–û—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PBR –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤–∫–ª—é—á–∞—è –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏');
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç HDRI-—Ñ–æ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
 * @param {string} hdriPath - –ø—É—Ç—å –∫ .exr —Ñ–∞–π–ª—É
 */
export function setHdriBackground(hdriPath) {
    if (!renderer) {
        console.error('Renderer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ HDRI
    console.log('üåÖ –ó–∞–≥—Ä—É–∂–∞–µ–º HDRI environment map:', hdriPath);
    
    const exrLoader = new EXRLoader();
    const pmremGenerator = new PMREMGenerator(renderer);
    pmremGenerator.compileEquirectangularShader();
    
    exrLoader.load(hdriPath, (texture) => {
        texture.mapping = THREE.EquirectangularReflectionMapping;
        texture.colorSpace = THREE.LinearSRGBColorSpace;
        const envMap = pmremGenerator.fromEquirectangular(texture).texture;
        scene.environment = envMap;
        scene.background = envMap;
        texture.dispose();
        pmremGenerator.dispose();
        console.log('‚úÖ HDRI environment map —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', hdriPath);
        setTimeout(() => {
            import('../modules/objectManager.js').then(({ updateMaterialsEnvironmentMap, updateWoodenMaterials }) => {
                updateMaterialsEnvironmentMap();
                if (updateWoodenMaterials) updateWoodenMaterials();
            }).catch(err => console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã:', err));
        }, 100);
        setTimeout(async () => {
            try {
                const { hideLoadingScreenSmooth } = await import('../utils/loadingScreen.js');
                await hideLoadingScreenSmooth();
            } catch (err) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å loadingScreen:', err);
            }
        }, 200);
    }, undefined, (error) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HDRI:', error);
        createCityboxFallback();
    });
}

// createEXRBackground —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç setHdriBackground —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –ø—É—Ç–µ–º
function createEXRBackground() {
    setHdriBackground('textures/hdri/autumn_park_4k.exr');
}

/**
 * Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è citybox –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ HDRI –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
 */
function createCityboxFallback() {
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º citybox –∫–∞–∫ fallback –¥–ª—è environment map');
    
    const loader = new THREE.CubeTextureLoader();
    loader.setPath('textures/citybox/');
    
    const textureCube = loader.load([
        'citybox_px.jpg', 'citybox_nx.jpg',
        'citybox_py.jpg', 'citybox_ny.jpg',
        'citybox_pz.jpg', 'citybox_nz.jpg'
    ], 
    // onLoad callback
    () => {
        console.log('‚úÖ Citybox environment map –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ fallback');
        
        // –°–∫—Ä—ã–≤–∞–µ–º loadingScreen –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ fallback
        setTimeout(async () => {
            try {
                const { hideLoadingScreenSmooth } = await import('../utils/loadingScreen.js');
                console.log('üåÖ Citybox environment map –≥–æ—Ç–æ–≤, —Å–∫—Ä—ã–≤–∞–µ–º loadingScreen');
                await hideLoadingScreenSmooth();
            } catch (err) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å loadingScreen:', err);
            }
        }, 200);
    });
    
    scene.background = textureCube;
    
    const pmremGenerator = new PMREMGenerator(renderer);
    const envMap = pmremGenerator.fromCubemap(textureCube).texture;
    scene.environment = envMap;
    pmremGenerator.dispose();
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
 * @param {THREE.WebGLRenderer} renderer - –†–µ–Ω–¥–µ—Ä–µ—Ä
 * @param {THREE.Camera} camera - –ö–∞–º–µ—Ä–∞
 */
export function setupResizeHandler(renderer, camera) {
    window.addEventListener('resize', () => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
        renderer.setSize(window.innerWidth, window.innerHeight);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∫–∞–º–µ—Ä—ã, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞
        if (camera.isPerspectiveCamera) {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
        }
    });
}
