/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π, –µ—ë –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ —Ä–µ–∂–∏–º–∞–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
 */
import { CAMERA_SETTINGS, TOP_VIEW_SETTINGS } from '../config.js';
import { easeInOutCubic } from '../utils.js';
import { initTopViewController, cleanupEventListeners } from './topViewController.js';
import * as THREE from 'three';
import { MOUSE } from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { ground } from '../playground/playgroundCore.js';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
export let camera;
export let controls;
export let isTopViewActive = false;
export let renderer;

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
let isToggling = false;

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞–º–µ—Ä—É –∏ –µ—ë —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * @param {THREE.WebGLRenderer} rendererInstance - –†–µ–Ω–¥–µ—Ä–µ—Ä
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–∞–º–µ—Ä—É –∏ –µ—ë –∫–æ–Ω—Ç—Ä–æ–ª—ã
 */
export async function setupCamera(rendererInstance) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ renderer
    renderer = rendererInstance;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –∏–∑ –ë–î
    let cameraSettings = {
        fov: CAMERA_SETTINGS.fov,
        near: 0.1,
        far: 1000
    };
    
    try {
        const climateZone = localStorage.getItem('selectedClimateZone') || 'russia_cis';
        const hdriPath = localStorage.getItem('selectedHdriPath') || 'textures/hdri/autumn_park_4k.exr';
        const surfaceName = localStorage.getItem('selectedSurfaceName') || '–¢—Ä–∞–≤–∞';
        
        const { getCameraSettings } = await import('../api/climate.js');
        const dbSettings = await getCameraSettings(climateZone, hdriPath, surfaceName);
        
        if (dbSettings) {
            cameraSettings = dbSettings;
            console.log('üì∑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î:', {
                fov: cameraSettings.fov,
                near: cameraSettings.near,
                far: cameraSettings.far,
                climateZone,
                hdri: hdriPath,
                surface: surfaceName
            });
        }
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ:', error);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ë–î
    camera = new THREE.PerspectiveCamera(
        cameraSettings.fov,
        window.innerWidth / window.innerHeight,
        cameraSettings.near,
        cameraSettings.far
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
    camera.position.set(
        CAMERA_SETTINGS.initialPosition.x,
        CAMERA_SETTINGS.initialPosition.y,
        CAMERA_SETTINGS.initialPosition.z
    );
    
    // –ö–∞–º–µ—Ä–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ü–µ–Ω—Ç—Ä —Å—Ü–µ–Ω—ã
    camera.lookAt(
        CAMERA_SETTINGS.lookAt.x,
        CAMERA_SETTINGS.lookAt.y,
        CAMERA_SETTINGS.lookAt.z
    );
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OrbitControls
    controls = new OrbitControls(camera, renderer.domElement);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    controls.enableDamping = CAMERA_SETTINGS.enableDamping;
    controls.dampingFactor = CAMERA_SETTINGS.dampingFactor;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    controls.minDistance = CAMERA_SETTINGS.minDistance; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç —Ü–µ–ª–∏
    controls.maxDistance = CAMERA_SETTINGS.maxDistance; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç —Ü–µ–ª–∏
    controls.zoomSpeed = CAMERA_SETTINGS.zoomSpeed;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≥–ª–æ–≤ –æ–±–∑–æ—Ä–∞
    controls.maxPolarAngle = CAMERA_SETTINGS.maxPolarAngle;
    controls.minPolarAngle = CAMERA_SETTINGS.minPolarAngle;
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏, –≤–æ–∫—Ä—É–≥ –∫–æ—Ç–æ—Ä–æ–π –≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–º–µ—Ä–∞
    controls.target.set(
        CAMERA_SETTINGS.lookAt.x,
        CAMERA_SETTINGS.lookAt.y,
        CAMERA_SETTINGS.lookAt.z
    );
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è OrbitControls –¥–ª—è –º—ã—à–∏
    controls.mouseButtons = {
        LEFT: MOUSE.ROTATE,     // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ - –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –≤–æ–∫—Ä—É–≥ —Ü–µ–ª–∏
        MIDDLE: MOUSE.DOLLY,    // –°—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ - –∑—É–º
        RIGHT: MOUSE.PAN        // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ - –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã)
    };
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã)
    controls.enablePan = true;
    controls.keyPanSpeed = 0.3; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã
    controls.panSpeed = 1.0;     // –°–∫–æ—Ä–æ—Å—Ç—å –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    controls.screenSpacePanning = true; // –ï—Å–ª–∏ true, –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–æ—â–∞–¥–∫–∏
    let maxPanBounds = 50; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–ª–æ—â–∞–¥–∫–∏
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    renderer.domElement.addEventListener('contextmenu', (event) => {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        event.preventDefault();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∏ –∑—É–º
    controls.addEventListener('change', () => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–æ–ø—É—Å—Ç–∏–º—É—é –≤—ã—Å–æ—Ç—É –∫–∞–º–µ—Ä—ã
        let minY = 1.0;
        if (ground && ground.position && ground.userData && typeof ground.userData.originalHeight === 'number') {
            minY = ground.position.y + (ground.userData.originalHeight * ground.scale.y) + 0.5;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã –∫–∞–º–µ—Ä—ã
        if (camera.position.y < minY) {
            camera.position.y = minY;
        }
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Å—Ü–µ–Ω—ã
        if (window.app && window.app.playgroundWidth && window.app.playgroundLength) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–ª–æ—â–∞–¥–∫–∏
            const diagonal = Math.sqrt(Math.pow(window.app.playgroundWidth, 2) + Math.pow(window.app.playgroundLength, 2));
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ - —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –æ—Ç–¥–∞–ª–µ–Ω–∏—è
            controls.maxDistance = diagonal * 6;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Ñ–æ–∫—É—Å–∞ –∫–∞–º–µ—Ä—ã - —Ç–∞–∫–∂–µ —É–≤–µ–ª–∏—á–µ–Ω–æ
            const maxOffset = diagonal * 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥–æ —Ü–µ–ª–∏ –∫–∞–º–µ—Ä—ã –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            const targetDistFromCenter = Math.sqrt(Math.pow(controls.target.x, 2) + Math.pow(controls.target.z, 2));
            if (targetDistFromCenter > maxOffset) {
                // –ï—Å–ª–∏ —Ç–æ—á–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä –∏ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                const ratio = maxOffset / targetDistFromCenter;
                controls.target.x *= ratio;
                controls.target.z *= ratio;
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–º–µ—Ä–µ –ø–ª–æ—â–∞–¥–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            controls.maxDistance = 200;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—ã—Å–æ—Ç—É —Ç–æ—á–∫–∏ —Ñ–æ–∫—É—Å–∞ –∫–∞–º–µ—Ä—ã
        if (controls.target.y < 0) {
            controls.target.y = 0;
        }
    });
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø—Ä–∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–∏
    renderer.domElement.addEventListener('mousedown', (event) => {
        if (event.button === 2) { // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
            renderer.domElement.style.cursor = 'move';
        }
    });
    
    renderer.domElement.addEventListener('mouseup', (event) => {
        if (event.button === 2) {
            renderer.domElement.style.cursor = 'auto';
        }
    });
    
    // –°–±—Ä–æ—Å –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–∫–Ω–∞
    renderer.domElement.addEventListener('mouseleave', () => {
        renderer.domElement.style.cursor = 'auto';
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –∫–∞–º–µ—Ä–µ –æ–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∏–∂–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ø–ª–æ—â–∞–¥–∫–∏
    controls.addEventListener('update', () => {
        let minY = 0.1;
        if (ground && ground.position && ground.userData && typeof ground.userData.originalHeight === 'number') {
            minY = ground.position.y + (ground.userData.originalHeight * ground.scale.y) + 0.05;
        }
        if (camera.position.y < minY) {
            camera.position.y = minY;
        }
    });
    
    return { camera, controls };
}

/**
 * –°–±—Ä–æ—Å –≤–∏–¥–∞ –∫–∞–º–µ—Ä—ã –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
 * @param {Number} width - –®–∏—Ä–∏–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
 * @param {Number} length - –î–ª–∏–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
 * @param {Boolean} fromToggleTopView - –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ toggleTopView
 */
export function resetCameraView(width, length, fromToggleTopView = false) {
    // –í—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä–Ω—É—é —Å–µ—Ç–∫—É –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤–∏–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∂–∏–º–∞
    import('../scene/gridManager.js').then(gridManagerModule => {
        gridManagerModule.toggleDimensionGridVisibility(false);
    });
    
    // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É, –Ω–æ –º—ã –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º disableTopView()
    // –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–≤–æ–π–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ toggleTopView)
    if (isTopViewActive && !fromToggleTopView) {
        console.log('–°–±—Ä–æ—Å –≤–∏–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É –Ω–∞–ø—Ä—è–º—É—é');
        
        // –í –Ω–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏
        // –ø–æ—ç—Ç–æ–º—É –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª—è—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É
        cleanupEventListeners();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏
        isTopViewActive = false;
        if (window.app) {
            window.app.isTopViewActive = false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É
        updateTopViewButtonStyle(false);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
    controls.minDistance = CAMERA_SETTINGS.minDistance;
    controls.maxDistance = CAMERA_SETTINGS.maxDistance;
    controls.minPolarAngle = CAMERA_SETTINGS.minPolarAngle;
    controls.maxPolarAngle = CAMERA_SETTINGS.maxPolarAngle;
    controls.enableRotate = true;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ–∫—Ç–æ—Ä up –¥–ª—è –∫–∞–º–µ—Ä—ã
    camera.up.set(0, 1, 0);
    
    // –í–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    controls.enabled = true;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const targetDistance = width > length ? width * 1.5 : length * 1.5; // –¶–µ–ª–µ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    const targetPosition = {
        x: 0,
        y: targetDistance * 0.8, // –ü–æ–¥–Ω–∏–º–∞–µ–º –∫–∞–º–µ—Ä—É –≤–≤–µ—Ä—Ö
        z: targetDistance        // –û—Ç–¥–∞–ª—è–µ–º –∫–∞–º–µ—Ä—É
    };
    const targetLookAt = { x: 0, y: 0, z: 0 }; // –¶–µ–Ω—Ç—Ä —Å—Ü–µ–Ω—ã
    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    animateCameraMove(targetPosition, targetLookAt, () => {
        console.log("–í–∏–¥ –∫–∞–º–µ—Ä—ã —Å–±—Ä–æ—à–µ–Ω")
    });
}

/**
 * –ê–Ω–∏–º–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–ª–∏
 * @param {THREE.Vector3|Object} targetPosition - –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã
 * @param {THREE.Vector3|Object} targetLookAt - –ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–ª—å –∫–∞–º–µ—Ä—ã
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
 */
export function animateCameraMove(targetPosition, targetLookAt, callback) {
    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
    const startTime = Date.now();
    const duration = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const startPosition = {
        x: camera.position.x,
        y: camera.position.y,
        z: camera.position.z
    };
    
    const startTarget = {
        x: controls.target.x,
        y: controls.target.y,
        z: controls.target.z
    };
    
    // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const animateCamera = function() {
        const elapsedTime = Date.now() - startTime;
        const progress = Math.min(elapsedTime / duration, 1);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        const easeProgress = easeInOutCubic(progress);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
        camera.position.x = startPosition.x + (targetPosition.x - startPosition.x) * easeProgress;
        camera.position.y = startPosition.y + (targetPosition.y - startPosition.y) * easeProgress;
        camera.position.z = startPosition.z + (targetPosition.z - startPosition.z) * easeProgress;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–∫—É –∫–∞–º–µ—Ä—ã
        controls.target.x = startTarget.x + (targetLookAt.x - startTarget.x) * easeProgress;
        controls.target.y = startTarget.y + (targetLookAt.y - startTarget.y) * easeProgress;
        controls.target.z = startTarget.z + (targetLookAt.z - startTarget.z) * easeProgress;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º OrbitControls
        controls.update();
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (progress < 1) {
            requestAnimationFrame(animateCamera);
        } else if (callback) {
            // –í—ã–∑—ã–≤–∞–µ–º callback –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
            callback();
        }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animateCamera();
}

/**
 * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É —Å —Å–µ—Ç–∫–æ–π
 * @param {Number} width - –®–∏—Ä–∏–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏
 * @param {Number} length - –î–ª–∏–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏
 * @returns {Boolean} –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É (true - –≤–∫–ª—é—á–µ–Ω, false - –≤—ã–∫–ª—é—á–µ–Ω)
 */
export function toggleTopView(width, length) {
    console.log('=== TOGGLE TOP VIEW CALLED ===');
    console.log('isToggling:', isToggling);
    console.log('isTopViewActive:', isTopViewActive);
    console.log('Stack trace:', new Error().stack);
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (isToggling) {
        console.log('toggleTopView —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤');
        return isTopViewActive;
    }
    
    isToggling = true;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ—Ç–∫–∞
        const hasGrid = window.app && window.app.gridHelper;
        
        // –ï—Å–ª–∏ —Å–µ—Ç–∫–∞ —É–∂–µ –µ—Å—Ç—å, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –µ—ë –Ω–µ—Ç - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (hasGrid && !isTopViewActive) {
            isTopViewActive = true;
        }
        
        console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º:', isTopViewActive);
        
        // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        isTopViewActive = !isTopViewActive;
                
        if (isTopViewActive) {
            console.log('–í–∫–ª—é—á–∞–µ–º –≤–∏–¥ —Å–≤–µ—Ä—Ö—É...');
            // –í–∫–ª—é—á–∞–µ–º –≤–∏–¥ —Å–≤–µ—Ä—Ö—É
            enableTopView(width, length);
        } else {
            console.log('–í—ã–∫–ª—é—á–∞–µ–º –≤–∏–¥ —Å–≤–µ—Ä—Ö—É...');
            // –í—ã–∫–ª—é—á–∞–µ–º –≤–∏–¥ —Å–≤–µ—Ä—Ö—É
            disableTopView();
            
            // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º resetCameraView –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É
            resetCameraView(width, length, true);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (window.app) {
            window.app.isTopViewActive = isTopViewActive;
        }
        
        // –£–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
        import('../scene/gridManager.js').then(gridManagerModule => {
            // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ø–ª–æ—â–∞–¥–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            let groundColor = '—Å–µ—Ä—ã–π';
            if (window.app && window.app.ground && window.app.ground.userData && window.app.ground.userData.groundColor) {
                groundColor = window.app.ground.userData.groundColor;
            } else if (ground && ground.userData && ground.userData.groundColor) {
                groundColor = ground.userData.groundColor;
            }
            
            gridManagerModule.handleTopViewToggle(isTopViewActive, width, length, groundColor);
        });
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        setTimeout(() => {
            updateTopViewButtonStyle(isTopViewActive);
        }, 0);
        
        console.log('=== TOGGLE TOP VIEW COMPLETED ===');
        console.log('Final state:', isTopViewActive);
        
        return isTopViewActive;
    } catch (error) {
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.error('–û—à–∏–±–∫–∞ –≤ toggleTopView:', error);
        return isTopViewActive;
    } finally {
        // –í—Å–µ–≥–¥–∞ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        setTimeout(() => {
            isToggling = false;
        }, 100);
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É
 * @param {Boolean} isActive - –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É
 */
function updateTopViewButtonStyle(isActive) {
    try {
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        let attempts = 0;
        const maxAttempts = 3;
        
        function tryUpdateButton() {
            // –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∫–Ω–æ–ø–∫—É exportModel –≤–º–µ—Å—Ç–æ topView
            const exportButton = document.getElementById("exportModel");
            
            if (exportButton) {
                if (isActive) {
                    exportButton.classList.add("active");
                } else {
                    exportButton.classList.remove("active");
                }
            } else {
                if (attempts < maxAttempts) {
                    attempts++;
                    // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                    setTimeout(tryUpdateButton, 100 * attempts);
                }
            }
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
        tryUpdateButton();
    } catch (error) {
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–ª—è –∫–Ω–æ–ø–∫–∏:', error);
    }
}

/**
 * –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É
 * @param {Number} width - –®–∏—Ä–∏–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏
 * @param {Number} length - –î–ª–∏–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏
 */
function enableTopView(width, length) {
    console.log("–í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É, —Ä–∞–∑–º–µ—Ä—ã –ø–ª–æ—â–∞–¥–∫–∏:", width, "x", length);
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞–º–µ—Ä—É –¥–ª—è –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É
    const diagonal = Math.sqrt(width * width + length * length);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã—Å–æ—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const targetHeight = diagonal * TOP_VIEW_SETTINGS.heightMultiplier;
        
    // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∏–¥—É —Å–≤–µ—Ä—Ö—É
    animateCameraMove({
        x: 0,
        y: targetHeight,
        z: 0.1 // –ù–µ–±–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ Z –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–∑–æ—Ä–∞
    }, {
        x: 0,
        y: 0,
        z: 0
    }, () => {
        // –í —Ä–µ–∂–∏–º–µ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
        // –ú—ã –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –µ—ë, –ø–æ–∑–≤–æ–ª—è—è –æ–±—ä–µ–∫—Ç–∞–º –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è
        // –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –≤ topViewController
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –û–¢–ö–õ–Æ–ß–ê–ï–ú —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ OrbitControls
        controls.enabled = false;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É
        const canvasElement = renderer.domElement;
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É
        initTopViewController(canvasElement, camera, targetHeight);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
        import('../scene/gridManager.js').then(gridManagerModule => {
            // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ø–ª–æ—â–∞–¥–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            let groundColor = '—Å–µ—Ä—ã–π';
            if (window.app && window.app.ground && window.app.ground.userData && window.app.ground.userData.groundColor) {
                groundColor = window.app.ground.userData.groundColor;
            } else if (ground && ground.userData && ground.userData.groundColor) {
                groundColor = ground.userData.groundColor;
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä–Ω—É—é —Å–µ—Ç–∫—É, —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –Ω–∞ 10%
            gridManagerModule.createDimensionGrid(width, length, groundColor, true);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å–µ—Ç–∫–∏
            if (gridManagerModule.dimensionGrid) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–µ—Ç–∫–∏
                gridManagerModule.dimensionGrid.userData.isTopViewGrid = true; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
                gridManagerModule.dimensionGrid.layers.set(1); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –æ—Å–æ–±—ã–π —Å–ª–æ–π
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∞—Ü–∏—é —Ä–∞–∑–º–µ—Ä–Ω–æ–π —Å–µ—Ç–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –≤—Ä–∞—â–∞–ª–∞—Å—å
                gridManagerModule.dimensionGrid.matrixAutoUpdate = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
            }
        });
        
    });
}

/**
 * –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏)
 */
function disableTopView() {
    console.log("–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É");
    
    // –í –Ω–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏
    // –ø–æ—ç—Ç–æ–º—É –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª—è—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    
    // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω—É—é —Å–µ—Ç–∫—É —á–µ—Ä–µ–∑ gridManager
    import('../scene/gridManager.js').then(gridManagerModule => {
        gridManagerModule.toggleDimensionGridVisibility(false);
        console.log("–†–∞–∑–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∞");
    });
    
    // –£–¥–∞–ª—è–µ–º —Å–µ—Ç–∫—É –∏ –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    cleanupGridHelper();
    
    // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É
    cleanupEventListeners();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
    controls.enabled = true;
    controls.enableRotate = true;
    controls.enablePan = true;
    controls.enableDamping = CAMERA_SETTINGS.enableDamping;
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ –º—ã—à–∏
    controls.mouseButtons = {
        LEFT: MOUSE.ROTATE,
        MIDDLE: MOUSE.DOLLY,
        RIGHT: MOUSE.PAN
    };
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ–∫—Ç–æ—Ä up –¥–ª—è –∫–∞–º–µ—Ä—ã
    camera.up.set(0, 1, 0);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
    controls.minDistance = CAMERA_SETTINGS.minDistance;
    controls.maxDistance = CAMERA_SETTINGS.maxDistance;
    controls.minPolarAngle = CAMERA_SETTINGS.minPolarAngle;
    controls.maxPolarAngle = CAMERA_SETTINGS.maxPolarAngle;
    
    console.log("–†–µ–∂–∏–º –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É –≤—ã–∫–ª—é—á–µ–Ω");
}

/**
 * –û—á–∏—â–∞–µ—Ç —Å–µ—Ç–∫—É –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π —Ä–µ—Å—É—Ä—Å—ã
 */
function cleanupGridHelper() {
    // –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª—è–µ—Ç —Å–µ—Ç–∫—É
    console.log("cleanupGridHelper –≤—ã–∑–≤–∞–Ω–∞, –Ω–æ —Å–µ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω)");
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @param {string} climateZone - –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞
 * @param {string} [hdriPath] - –ü—É—Ç—å –∫ HDRI —Ñ–∞–π–ª—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {string} [surfaceName] - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, false –µ—Å–ª–∏ –Ω–µ—Ç
 */
export async function updateCameraSettings(climateZone, hdriPath = null, surfaceName = null) {
    if (!camera) {
        console.warn('–ö–∞–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        return false;
    }
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –±–µ—Ä–µ–º –∏–∑ localStorage
        const actualHdriPath = hdriPath || localStorage.getItem('selectedHdriPath') || 'textures/hdri/autumn_park_4k.exr';
        const actualSurfaceName = surfaceName || localStorage.getItem('selectedSurfaceName') || '–¢—Ä–∞–≤–∞';
        
        const { getCameraSettings } = await import('../api/climate.js');
        const settings = await getCameraSettings(climateZone, actualHdriPath, actualSurfaceName);
        
        if (settings) {
            // –û–±–Ω–æ–≤–ª—è–µ–º FOV –∫–∞–º–µ—Ä—ã
            camera.fov = settings.fov;
            camera.near = settings.near;
            camera.far = settings.far;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            camera.updateProjectionMatrix();
            
            console.log('üì∑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã:', {
                fov: settings.fov,
                near: settings.near,
                far: settings.far,
                climateZone,
                hdri: actualHdriPath,
                surface: actualSurfaceName
            });
            return true;
        }
        
        return false;
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã:', error);
        return false;
    }
}