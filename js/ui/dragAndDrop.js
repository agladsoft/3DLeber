/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è drag and drop —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
import { canvas, scene } from '../scene.js';
import { ground } from '../playground.js';
import { loadAndPlaceModel, placedObjects, removeObject } from '../objects.js';
import { 
    raycaster, 
    updateMousePosition, 
    updateRaycaster 
} from './uiCore.js';
import * as THREE from 'three';
import { API_BASE_URL } from '../api/serverConfig.js';

// Map –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ drop –ø–æ –º–æ–¥–µ–ª—è–º (–≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
const processingModels = new Map();

/**
 * –ù–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è preloader –º–æ–¥–µ–ª–∏
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏
 */
function hidePreloaderForModel(modelName) {
    console.log('üîÑ [hidePreloaderForModel] Attempting to hide preloader for:', modelName);
    
    let preloadersHidden = 0;
    
    // –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ DOM
    const modelElements = document.querySelectorAll(`[data-model="${modelName}"]`);
    console.log('üîç [hidePreloaderForModel] Found model elements:', modelElements.length, 'for:', modelName);
    
    modelElements.forEach((element, index) => {
        const preloader = element.querySelector('.model-preloader');
        console.log(`üîç [hidePreloaderForModel] Element ${index} preloader:`, preloader, 'visible class:', preloader ? preloader.classList.contains('visible') : 'N/A');
        
        if (preloader) {
            const hadVisible = preloader.classList.contains('visible');
            preloader.classList.remove('visible');
            preloader.style.display = 'none'; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ style
            
            if (hadVisible) {
                preloadersHidden++;
                console.log(`‚úÖ [hidePreloaderForModel] Preloader hidden (element ${index}) for:`, modelName);
            } else {
                console.log(`‚ÑπÔ∏è [hidePreloaderForModel] Preloader was already hidden (element ${index}) for:`, modelName);
            }
        }
    });
    
    // –°–ø–æ—Å–æ–± 2: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Å–µ–º preloader —ç–ª–µ–º–µ–Ω—Ç–∞–º
    const allPreloaders = document.querySelectorAll('.model-preloader.visible');
    console.log('üîç [hidePreloaderForModel] Found all visible preloaders:', allPreloaders.length);
    
    allPreloaders.forEach((preloader, index) => {
        const parentElement = preloader.closest('[data-model]');
        const parentModelName = parentElement ? parentElement.getAttribute('data-model') : null;
        console.log(`üîç [hidePreloaderForModel] Visible preloader ${index} parent model:`, parentModelName);
        
        if (parentElement && parentModelName === modelName) {
            preloader.classList.remove('visible');
            preloader.style.display = 'none'; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
            preloadersHidden++;
            console.log(`‚úÖ [hidePreloaderForModel] Additional preloader hidden (${index}) for:`, modelName);
        }
    });
    
    // –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º preloader –±–µ–∑ –∫–ª–∞—Å—Å–∞ visible, –Ω–æ —Å display: block
    const allModelPreloaders = document.querySelectorAll('.model-preloader');
    allModelPreloaders.forEach((preloader, index) => {
        const parentElement = preloader.closest('[data-model]');
        const parentModelName = parentElement ? parentElement.getAttribute('data-model') : null;
        
        if (parentElement && parentModelName === modelName) {
            const computedStyle = window.getComputedStyle(preloader);
            if (computedStyle.display !== 'none') {
                console.log(`üîç [hidePreloaderForModel] Found visible preloader via computed style (${index}) for:`, modelName);
                preloader.classList.remove('visible');
                preloader.style.display = 'none';
                preloadersHidden++;
                console.log(`‚úÖ [hidePreloaderForModel] Forced hidden via style (${index}) for:`, modelName);
            }
        }
    });
    
    console.log(`üìä [hidePreloaderForModel] Total preloaders hidden: ${preloadersHidden} for:`, modelName);
    
    // –°–ø–æ—Å–æ–± 4: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ sidebar.js –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–µ—Ä–∞
    import('../sidebar.js').then(sidebarModule => {
        if (sidebarModule.hideModelPreloader) {
            console.log('üîÑ [hidePreloaderForModel] Calling sidebar hideModelPreloader for:', modelName);
            sidebarModule.hideModelPreloader(modelName);
        }
    }).catch(error => {
        console.error('‚ùå [hidePreloaderForModel] Failed to import sidebar:', error);
    });
}

/**
 * –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –±–µ–∑ –±–∞—Ç—á–∏–Ω–≥–∞
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏
 * @param {number} delta - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
 */
function batchUIUpdate(modelName, delta) {
    // –ü—Ä—è–º–æ–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    updateSidebarInstantly(modelName, delta);
}

/**
 * –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –≤ sidebar (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ –±–∞—Ç—á–∏–Ω–≥–∞)
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏
 * @param {number} delta - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
 */
function updateSidebarInstantly(modelName, delta) {
    // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ async –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (window.updateModelCounterDirectly) {
        window.updateModelCounterDirectly(modelName, delta);
    } else {
        import('../sidebar.js').then(sidebarModule => {
            if (sidebarModule.updateModelCounterDirectly) {
                sidebarModule.updateModelCounterDirectly(modelName, delta);
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                window.updateModelCounterDirectly = sidebarModule.updateModelCounterDirectly;
            }
        });
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
 */
async function getSessionData() {
    const userId = sessionStorage.getItem('userId');
    if (!userId) {
        throw new Error('No user ID found');
    }

    try {
        const sessionResponse = await fetch(`${API_BASE_URL}/session/${userId}`);
        if (!sessionResponse.ok) {
            throw new Error('Failed to get session');
        }

        const { session } = await sessionResponse.json();
        return session || { quantities: {}, placedObjects: [] };
    } catch (error) {
        console.error('Error getting session data:', error);
        return { quantities: {}, placedObjects: [] };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏
 * @returns {Promise<number>} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
 */
export async function getQuantityFromDatabase(modelName) {
    try {
        const sessionData = await getSessionData();
        return sessionData.quantities?.[modelName] || 0;
    } catch (error) {
        console.error('Error getting quantity from database:', error);
        return 0;
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏
 * @param {number} quantity - –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
 */
export async function saveQuantityToDatabase(modelName, quantity) {
    try {
        const userId = sessionStorage.getItem('userId');
        if (!userId) {
            throw new Error('No user ID found');
        }

        const sessionData = await getSessionData();
        sessionData.quantities = sessionData.quantities || {};
        sessionData.quantities[modelName] = quantity;

        const saveResponse = await fetch(`${API_BASE_URL}/session`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId, sessionData }),
        });

        if (!saveResponse.ok) {
            throw new Error('Failed to save session');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        const items = document.querySelectorAll('.item');
        items.forEach(item => {
            if (item.getAttribute('data-model') === modelName) {
                updateModelQuantityUI(item, quantity);
            }
        });
    } catch (error) {
        console.error('Error saving quantity to database:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
 */
export function updateModelQuantityUI(item, newQuantity) {
    const quantityElement = item.querySelector('.model-quantity');
    if (quantityElement) {
        quantityElement.textContent = newQuantity;
    }
    
    item.setAttribute('data-quantity', newQuantity);
    
    if (newQuantity <= 0) {
        item.style.filter = 'blur(2px)';
        item.style.opacity = '0.9';
        item.style.pointerEvents = 'none';
    } else {
        item.style.filter = 'none';
        item.style.opacity = '1';
        item.style.pointerEvents = 'auto';
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è drag and drop
 */
export function initDragAndDrop() {    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    removeExistingHandlers();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞
    addDragStartHandlers();

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è drop
    canvas.addEventListener("dragover", event => event.preventDefault());

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è drop –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
    canvas.addEventListener("drop", handleDrop);
    
    // –î–æ–±–∞–≤–ª—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ—Å—Ç–∏–∫–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    updateSidebarDeleteButtons();
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è—é –∫—Ä–µ—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 500 –º—Å)
    setInterval(updateSidebarDeleteButtons, 2000);
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
 */
function removeExistingHandlers() {    
    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag-and-drop, –Ω–µ —Ç—Ä–æ–≥–∞—è canvas
    // –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ, —á–µ–º –∑–∞–º–µ–Ω—è—Ç—å canvas, —á—Ç–æ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å 3D-—Å—Ü–µ–Ω—É
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å canvas
    if (canvas) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        const oldHandler = canvas._dropHandler;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if (oldHandler) {
            canvas.removeEventListener("drop", oldHandler);
            canvas.removeEventListener("dragover", event => event.preventDefault());
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        canvas._dropHandler = handleDrop;
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ dragstart —Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞
    document.querySelectorAll(".item").forEach(item => {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ dragstart
        const newItem = item.cloneNode(true);
        if (item.parentNode) {
            item.parentNode.replaceChild(newItem, item);
        }
    });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏
 * @param {number} newQuantity - –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
 */
async function updateModelQuantity(modelName, newQuantity) {
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    const items = document.querySelectorAll('.item');
    items.forEach(item => {
        if (item.getAttribute('data-model') === modelName) {
            updateModelQuantityUI(item, newQuantity);
        }
    });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ drop
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏
 * @param {number} placedCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
async function updateModelPlacementAfterDrop(modelName, placedCount) {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateModelPlacementCounter –∏–∑ sidebar
    const { updateModelPlacementCounter } = await import('../sidebar.js');
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏—à–Ω–µ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞
    await updateModelPlacementCounter(modelName, placedCount);
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞
 */
function addDragStartHandlers() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º .model (–Ω–æ–≤—ã–π sidebar)
    const modelElements = document.querySelectorAll(".model");
    if (modelElements.length > 0) {
        console.log("Found new sidebar structure with .model elements");
        // –î–ª—è –Ω–æ–≤–æ–≥–æ sidebar –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ sidebar.js
        return;
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å .item —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    const itemElements = document.querySelectorAll(".item");
    if (itemElements.length === 0) {
        console.log("No drag-and-drop elements found");
        return;
    }
        
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
    const invisibleDragImage = document.createElement('div');
    invisibleDragImage.style.width = '1px';
    invisibleDragImage.style.height = '1px';
    invisibleDragImage.style.position = 'absolute';
    invisibleDragImage.style.top = '-1000px';
    invisibleDragImage.style.opacity = '0';
    document.body.appendChild(invisibleDragImage);
    
    itemElements.forEach(item => {
        item.addEventListener("dragstart", event => {
            const model = event.target.closest(".item").getAttribute("data-model");
            const currentQuantity = parseInt(event.target.closest(".item").getAttribute("data-quantity") || "0");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if (currentQuantity <= 0) {
                event.preventDefault();
                return;
            }
            
            console.log("Drag started:", model);
            event.dataTransfer.setData("model", model);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
            event.dataTransfer.setDragImage(invisibleDragImage, 0, 0);
        });
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ drop –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
 * @param {DragEvent} event - –°–æ–±—ã—Ç–∏–µ drop
 */
async function handleDrop(event) {
    event.preventDefault();
    
    const modelName = event.dataTransfer.getData("model");
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ drop –¥–ª—è –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –º–æ–¥–µ–ª–∏
    if (processingModels.has(modelName)) {
        console.log(`Drop for ${modelName} already processing, skipping`);
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    processingModels.set(modelName, true);
    
    try {
        console.log("Model name from event:", modelName);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
        if (!modelName) {
            console.warn("Drop event without model name");
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –∏–∑ sessionStorage
        const modelsData = JSON.parse(sessionStorage.getItem('models') || '[]');
        const userId = sessionStorage.getItem('userId');
        
        // –ü–æ–ª—É—á–∞–µ–º article –∏–∑ data transfer (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏–∑ –º–æ–¥–µ–ª–∏
        const article = event.dataTransfer.getData("article");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π (–∏–∑ sidebar)
        const modelElement = document.querySelector(`[data-model="${modelName}"]`);
        const isSpecialModel = modelElement && modelElement.hasAttribute('data-special');
        
        // –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª—É
        let modelData = null;
        if (article) {
            modelData = modelsData.find(m => m.article === article);
        } else {
            // Fallback: –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏ (–±–µ–∑ .glb)
            const modelNameWithoutExt = modelName.replace('.glb', '');
            modelData = modelsData.find(m => m.name === modelNameWithoutExt);
        }
        
        // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ sessionStorage
        if (!modelData && isSpecialModel) {
            console.log(`Special model detected: ${modelName}, skipping sessionStorage check`);
            modelData = {
                name: modelName.replace('.glb', ''),
                article: article || 'SPECIAL',
                quantity: Infinity,
                isSpecial: true
            };
        }
        
        if (!modelData) {
            console.warn("Model data not found for:", modelName);
            return;
        }
        
        // –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ
        const { placedObjects } = await import('../modules/objectManager.js');
        const placedCount = placedObjects.filter(obj => obj.userData.modelName === modelName).length;
        
        const totalQuantity = modelData.quantity || 0;
        const remainingQuantity = totalQuantity - placedCount;
        
        console.log(`Fast drop check for ${modelName}: placed=${placedCount}, total=${totalQuantity}, remaining=${remainingQuantity}, isSpecial=${isSpecialModel}`);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        if (!isSpecialModel && remainingQuantity <= 0) {
            console.warn(`No available quantity for model ${modelName}: ${remainingQuantity} remaining`);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã –∏ –ø–ª–æ—â–∞–¥–∫–∏
        if (!scene) {
            console.error("Scene not initialized");
            return;
        }
        
        if (!ground) {
            console.error("Ground not initialized");
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
        updateMousePosition(event);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º raycaster
        updateRaycaster();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const position = determineDropPosition();
        console.log("Determined drop position:", position);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º –º–æ–¥–µ–ª—å
        console.log("Calling loadAndPlaceModel with:", modelName, position);
        
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ drop –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–∏—è preloader –≤ dragend
        if (modelElement) {
            modelElement.dataset.dragProcessed = 'true';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (UI —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤ objectManager)
        try {
            console.log("Starting model loading for:", modelName);
            await loadAndPlaceModel(modelName, position);
            console.log("Model loaded successfully, now hiding preloader for:", modelName);
            
            // –°–∫—Ä—ã–≤–∞–µ–º preloader –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            hidePreloaderForModel(modelName);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ setTimeout –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            setTimeout(() => {
                console.log("Forcing preloader hide via setTimeout for:", modelName);
                hidePreloaderForModel(modelName);
            }, 100);
            
            console.log("Preloader hidden successfully for:", modelName);
        } catch (loadError) {
            console.error("Failed to load model:", loadError);
            console.error("Stack trace:", loadError.stack);
            
            // –°–∫—Ä—ã–≤–∞–µ–º preloader –∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
            console.log("Hiding preloader due to load error for:", modelName);
            hidePreloaderForModel(modelName);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            setTimeout(() => {
                console.log("Forcing preloader hide after error for:", modelName);
                hidePreloaderForModel(modelName);
            }, 100);
            
            console.log("Preloader hidden after error for:", modelName);
        }
        
    } catch (error) {
        console.error("Error in handleDrop:", error);
        // –°–∫—Ä—ã–≤–∞–µ–º preloader –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
        console.log("Hiding preloader due to general error for:", modelName);
        hidePreloaderForModel(modelName);
        console.log("Preloader hidden after general error for:", modelName);
    } finally {
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ preloader
        setTimeout(() => {
            console.log("üîÑ [handleDrop] Final forced preloader hide for:", modelName);
            hidePreloaderForModel(modelName);
        }, 200);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
        processingModels.delete(modelName);
    }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ—á–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏ drop
 * @returns {THREE.Vector3} –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
 */
function determineDropPosition() {
    console.log("Determining drop position");
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã (–ø–ª–æ—â–∞–¥–∫–∞)
    let intersects = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å ground —á–µ—Ä–µ–∑ raycaster
    if (ground) {
        // –ï—Å–ª–∏ ground —Å–∞–º —è–≤–ª—è–µ—Ç—Å—è –º–µ—à–µ–º (–∫–∞–∫ –≤ —Å–ª—É—á–∞–µ —Å –ø—Ä–æ—Å—Ç–æ–π –ø–ª–æ—â–∞–¥–∫–æ–π)
        if (ground.isMesh) {
            console.log("Ground is a mesh itself, trying direct intersection");
            const directIntersect = raycaster.intersectObject(ground, false);
            console.log("Direct intersection results:", directIntersect);
            if (directIntersect && directIntersect.length > 0) {
                intersects.push(...directIntersect);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –º–µ—à–µ–π –≤ ground
        const childIntersects = raycaster.intersectObject(ground, true);
        console.log("Child intersection results:", childIntersects);
        if (childIntersects && childIntersects.length > 0) {
            intersects.push(...childIntersects);
        }
    } else {
        console.warn("Ground is null, can't check for intersections with ground");
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤ —Å—Ü–µ–Ω–µ, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –∫–∞–∫ –ø–ª–æ—â–∞–¥–∫–∞
    if (scene) {
        console.log("Checking scene for playground objects");
        scene.traverse((object) => {
            if (object.userData && object.userData.isPlayground && object.isMesh) {
                console.log("Found playground mesh in scene:", object.name);
                const sceneIntersects = raycaster.intersectObject(object, false);
                if (sceneIntersects && sceneIntersects.length > 0) {
                    console.log("Found intersection with scene playground mesh:", sceneIntersects);
                    intersects.push(...sceneIntersects);
                }
            }
        });
    }
    
    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ø–ª–æ—â–∞–¥–∫–æ–π
    if (intersects.length > 0) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –∫–∞–º–µ—Ä—ã
        intersects.sort((a, b) => a.distance - b.distance);
        console.log("Using closest intersection point:", intersects[0].point);
        return intersects[0].point;
    } else {
        console.log("No intersections found, using plane at Y=0");
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ Y=0
        const planeIntersect = new THREE.Vector3();
        const planeY0 = new THREE.Plane(new THREE.Vector3(0, 1, 0), 0);
        const intersected = raycaster.ray.intersectPlane(planeY0, planeIntersect);
        
        if (intersected) {
            console.log("Plane Y=0 intersection found:", planeIntersect);
            return planeIntersect;
        } else {
            // –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–æ—á–∫—É
            console.log("Fallback to fixed position (0,0,0)");
            return new THREE.Vector3(0, 0, 0);
        }
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
 * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏
 */
export async function updateModelQuantityOnRemove(modelName) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É sidebar —Å .model —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    const modelElements = document.querySelectorAll('.model');
    if (modelElements.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateModelPlacementCounter –∏–∑ sidebar.js
        try {
            const { updateModelPlacementCounter } = await import('../sidebar.js');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ placedCount - 
            // —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –ø–æ–ª—É—á–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            await updateModelPlacementCounter(modelName);
        } catch (error) {
            console.error('Error updating model placement counter:', error);
        }
        return;
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å .item —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    const items = document.querySelectorAll('.item');
    items.forEach(item => {
        if (item.getAttribute('data-model') === modelName) {
            const currentQuantity = parseInt(item.getAttribute('data-quantity') || '0');
            const newQuantity = currentQuantity + 1;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            updateModelQuantityUI(item, newQuantity);
            
            item.classList.remove('blurred');
        }
    });
}

function updateSidebarDeleteButtons() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É sidebar —Å .model —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    const modelElements = document.querySelectorAll('.model');
    if (modelElements.length > 0) {
        // –í –Ω–æ–≤–æ–º sidebar –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ –±—É–¥—É—â–µ–º
        return;
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å .item —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    document.querySelectorAll('.item').forEach(item => {
        const modelName = item.getAttribute('data-model');
        const deleteBtn = item.querySelector('.sidebar-delete');
        if (!deleteBtn) {
            return;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ
        const exists = placedObjects.some(obj => obj.userData.modelName === modelName);
        deleteBtn.style.display = exists ? '' : 'none';
        // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const newDeleteBtn = deleteBtn.cloneNode(true);
        deleteBtn.parentNode.replaceChild(newDeleteBtn, deleteBtn);
        if (exists) {
            newDeleteBtn.addEventListener('click', async () => {
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ —Å –ø–ª–æ—â–∞–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                const objectsToRemove = placedObjects.filter(obj => obj.userData.modelName === modelName);
                
                if (objectsToRemove.length > 1) {
                    // –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    try {
                        const { removeObjectsBatch } = await import('../modules/objectManager.js');
                        await removeObjectsBatch(objectsToRemove, modelName);
                        console.log(`–ú–∞—Å—Å–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ ${objectsToRemove.length} –æ–±—ä–µ–∫—Ç–æ–≤ –º–æ–¥–µ–ª–∏ ${modelName}`);
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏:', error);
                        // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
                        objectsToRemove.forEach((obj, index) => {
                            const isMassRemoval = index < objectsToRemove.length - 1;
                            removeObject(obj, isMassRemoval);
                            if (!isMassRemoval) {
                                updateModelQuantityOnRemove(modelName);
                            }
                        });
                    }
                } else if (objectsToRemove.length === 1) {
                    // –û–¥–∏–Ω–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    removeObject(objectsToRemove[0]);
                    updateModelQuantityOnRemove(modelName);
                }
                
                // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                setTimeout(updateSidebarDeleteButtons, 100);
            });
        }
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { getSessionData, batchUIUpdate };
