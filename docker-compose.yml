version: "3.9"
services:
  api:
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile.api
    network_mode: host
    expose:
      - "3000"
    volumes:
      - ./js:/app/js
      - ./models:/app/js/models
      - ./certbot/conf:/etc/letsencrypt:ro
    environment:
      - SERVER_NAME=${SERVER_NAME}
      - SERVER_PORT=${SERVER_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres:
    container_name: ${POSTGRES_HOST}
    image: postgres:13.3
    command:
      - "postgres"
      - "-c"
      - "max_connections=500"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
      - "-c"
      - "log_destination=csvlog"
      - "-c"
      - "logging_collector=on"
      - "-c"
      - "log_directory=pg_log"
      - "-c"
      - "log_filename=postgresql-%Y-%m-%d_%H%M%S.log"
      - "-c"
      - "log_statement=mod"
      - "-c"
      - "log_timezone=Europe/Moscow"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - app-network

  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SERVER_NAME=${SERVER_NAME}
        - SERVER_PORT=${SERVER_PORT}
        - POSTGRES_HOST=${POSTGRES_HOST}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/templates:/etc/nginx/templates
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./models:/usr/share/nginx/html/models
      - ./js:/usr/share/nginx/html/js
      - ./css:/usr/share/nginx/html/css
      - ./textures:/usr/share/nginx/html/textures
      - ./models.json:/usr/share/nginx/html/models.json
    environment:
      - SERVER_NAME=${SERVER_NAME}
    depends_on:
      api:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network

  certbot:
    # Получение первого сертификата ⬇
    # sudo docker compose run --rm certbot certbot certonly --webroot -w /var/www/certbot \
    #   --email timurka.zavyalov@mail.ru \
    #   -d 3d.leber.ru \
    #   --rsa-key-size 2048 \
    #   --agree-tos \
    #   --force-renewal

    container_name: certbot
    image: certbot/certbot:v2.6.0
    command:
      sh -c "certbot renew --webroot --webroot-path /var/www/certbot; echo 'renew done';"
    entrypoint: ""
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
    depends_on:
      - nginx
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pgdata: